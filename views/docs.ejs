<div class="container-fluid">
  <div class="row-fluid span12">

    <div class="well sidebar-nav-fixed span2">
      <ul class="nav nav-list" id="nav-list">
        
        
        <li>
          <ul class="module">
            <li><h4><a class="mod-link" href="#adapter-module">adapter</a></h4></li>
            <li>  
              <ul class="module-items">
              
                <li class="nav classes">
                  <ul>
                    <li><h5>Classes:</h5></li>
                  
                    
                    <li>
                      <a href="#class.adapter.Adapter">Adapter</a>
                    </li>  
                    

                    
                     <ul>
                     <li><h6 class="class-indent">Adapter Methods:</h6></li>
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.query">query</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.use">use</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.connection">connection</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.type">type</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.serializer">serializer</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.self">self</a>
                        </li> 
                       
                     </ul>
                    

                  

                  </ul>
                </li>
              

              
                <li class="nav properties">
                  <ul>
                    <li><h5>Properties:</h5></li>
                  
                    
                
                    <li>
                      <a href="#property.adapter.collection">collection</a>
                    </li>
                  
                    
                
                    <li>
                      <a href="#property.adapter.Adapter">Adapter</a>
                    </li>
                  
                  </ul>             
                </li>
              
              
              
                <li class="nav methods">
                  <ul>
                  <li><h5>Methods:</h5></li>
                  
                    
                   
                    <li>
                      <a href="#method.adapter.adapter">adapter</a>
                    </li>
                  
                  </ul>
                </li>
              

            </ul>  


            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a class="mod-link" href="#cookbook-module">cookbook</a></h4></li>
            <li>  
              <ul class="module-items">
              

              
                <li class="nav properties">
                  <ul>
                    <li><h5>Properties:</h5></li>
                  
                    
                
                    <li>
                      <a href="#property.cookbook.lookupDirectories">lookupDirectories</a>
                    </li>
                  
                  </ul>             
                </li>
              
              
              
                <li class="nav methods">
                  <ul>
                  <li><h5>Methods:</h5></li>
                  
                    
                   
                    <li>
                      <a href="#method.cookbook.findCookbookPaths">findCookbookPaths</a>
                    </li>
                  
                  </ul>
                </li>
              

            </ul>  


            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a class="mod-link" href="#expression-module">expression</a></h4></li>
            <li>  
              <ul class="module-items">
              

              
                <li class="nav properties">
                  <ul>
                    <li><h5>Properties:</h5></li>
                  
                    
                
                    <li>
                      <a href="#property.expression.exports">exports</a>
                    </li>
                  
                  </ul>             
                </li>
              
              
              
                <li class="nav methods">
                  <ul>
                  <li><h5>Methods:</h5></li>
                  
                    
                   
                    <li>
                      <a href="#method.expression.expression">expression</a>
                    </li>
                  
                  </ul>
                </li>
              

            </ul>  


            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a class="mod-link" href="#route-module">route</a></h4></li>
            <li>  
              <ul class="module-items">
              
                <li class="nav classes">
                  <ul>
                    <li><h5>Classes:</h5></li>
                  
                    
                    <li>
                      <a href="#class.route.Route">Route</a>
                    </li>  
                    

                    
                     <ul>
                     <li><h6 class="class-indent">Route Methods:</h6></li>
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.param">param</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.validate">validate</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.type">type</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.use">use</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.accept">accept</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.format">format</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.action">action</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.self">self</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.match">match</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.handle">handle</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.parseParams">parseParams</a>
                        </li> 
                       
                     </ul>
                    

                  

                  </ul>
                </li>
              

              
                <li class="nav properties">
                  <ul>
                    <li><h5>Properties:</h5></li>
                  
                    
                
                    <li>
                      <a href="#property.route.Route">Route</a>
                    </li>
                  
                    
                
                    <li>
                      <a href="#property.route.collection">collection</a>
                    </li>
                  
                  </ul>             
                </li>
              
              
              
                <li class="nav methods">
                  <ul>
                  <li><h5>Methods:</h5></li>
                  
                    
                   
                    <li>
                      <a href="#method.route.route">route</a>
                    </li>
                  
                  </ul>
                </li>
              

            </ul>  


            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a class="mod-link" href="#type-module">type</a></h4></li>
            <li>  
              <ul class="module-items">
              
                <li class="nav classes">
                  <ul>
                    <li><h5>Classes:</h5></li>
                  
                    
                    <li>
                      <a href="#class.type.Type">Type</a>
                    </li>  
                    

                    
                     <ul>
                     <li><h6 class="class-indent">Type Methods:</h6></li>
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.validator">validator</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.use">use</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.sanitize">sanitize</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.serializer">serializer</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.to">to</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.from">from</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.type">type</a>
                        </li> 
                       
                     </ul>
                    

                  

                  </ul>
                </li>
              

              
                <li class="nav properties">
                  <ul>
                    <li><h5>Properties:</h5></li>
                  
                    
                
                    <li>
                      <a href="#property.type.Type">Type</a>
                    </li>
                  
                    
                
                    <li>
                      <a href="#property.type.collection">collection</a>
                    </li>
                  
                    
                
                    <li>
                      <a href="#property.type.validator">validator</a>
                    </li>
                  
                    
                
                    <li>
                      <a href="#property.type.exports">exports</a>
                    </li>
                  
                  </ul>             
                </li>
              
              
              
                <li class="nav methods">
                  <ul>
                  <li><h5>Methods:</h5></li>
                  
                    
                   
                    <li>
                      <a href="#method.type.type">type</a>
                    </li>
                  
                    
                   
                    <li>
                      <a href="#method.type.types">types</a>
                    </li>
                  
                  </ul>
                </li>
              

            </ul>  


            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a class="mod-link" href="#cli-module">cli</a></h4></li>
            <li>  
              <ul class="module-items">
              

              
                <li class="nav properties">
                  <ul>
                    <li><h5>Properties:</h5></li>
                  
                    
                
                    <li>
                      <a href="#property.cli.verbs">verbs</a>
                    </li>
                  
                    
                
                    <li>
                      <a href="#property.cli.commands">commands</a>
                    </li>
                  
                    
                
                    <li>
                      <a href="#property.cli.aliases">aliases</a>
                    </li>
                  
                    
                
                    <li>
                      <a href="#property.cli.version">version</a>
                    </li>
                  
                  </ul>             
                </li>
              
              
              
                <li class="nav methods">
                  <ul>
                  <li><h5>Methods:</h5></li>
                  
                    
                   
                    <li>
                      <a href="#method.cli.recipe">recipe</a>
                    </li>
                  
                    
                   
                    <li>
                      <a href="#method.cli.command">command</a>
                    </li>
                  
                    
                   
                    <li>
                      <a href="#method.cli.version">version</a>
                    </li>
                  
                    
                   
                    <li>
                      <a href="#method.cli.unknownCommand">unknownCommand</a>
                    </li>
                  
                  </ul>
                </li>
              

            </ul>  


            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a class="mod-link" href="#directive-module">directive</a></h4></li>
            <li>  
              <ul class="module-items">
              
                <li class="nav classes">
                  <ul>
                    <li><h5>Classes:</h5></li>
                  
                    
                    <li>
                      <a href="#class.directive.Directive">Directive</a>
                    </li>  
                    

                    
                     <ul>
                     <li><h6 class="class-indent">Directive Methods:</h6></li>
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.exec">exec</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.compile">compile</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.types">types</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method._compileAttr">_compileAttr</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.priority">priority</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.toString">toString</a>
                        </li> 
                       
                     </ul>
                    

                  

                  </ul>
                </li>
              

              
                <li class="nav properties">
                  <ul>
                    <li><h5>Properties:</h5></li>
                  
                    
                
                    <li>
                      <a href="#property.directive.collection">collection</a>
                    </li>
                  
                    
                
                    <li>
                      <a href="#property.directive.Directive">Directive</a>
                    </li>
                  
                    
                
                    <li>
                      <a href="#property.directive.exports">exports</a>
                    </li>
                  
                  </ul>             
                </li>
              
              
              
                <li class="nav methods">
                  <ul>
                  <li><h5>Methods:</h5></li>
                  
                    
                   
                    <li>
                      <a href="#method.directive.directive">directive</a>
                    </li>
                  
                    
                   
                    <li>
                      <a href="#method.directive.directives">directives</a>
                    </li>
                  
                  </ul>
                </li>
              

            </ul>  


            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a class="mod-link" href="#query-module">query</a></h4></li>
            <li>  
              <ul class="module-items">
              
                <li class="nav classes">
                  <ul>
                    <li><h5>Classes:</h5></li>
                  
                    
                    <li>
                      <a href="#class.query.Query">Query</a>
                    </li>  
                    

                    
                     <ul>
                     <li><h6 class="class-indent">Query Methods:</h6></li>
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.use">use</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.start">start</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.returns">returns</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.select">select</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.where">where</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.incoming">incoming</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.outgoing">outgoing</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.as">as</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.contains">contains</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.create">create</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.update">update</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.first">first</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.last">last</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.limit">limit</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.page">page</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.offset">offset</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.asc">asc</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.desc">desc</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.relation">relation</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.constraint">constraint</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.action">action</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.sort">sort</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.explain">explain</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.clone">clone</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.exec">exec</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.validate">validate</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.subscribe">subscribe</a>
                        </li> 
                       
                        
                        <li class="class-indent">
                          <a href="#class.method.query">query</a>
                        </li> 
                       
                     </ul>
                    

                  
                    
                    <li>
                      <a href="#class.query.Constraint">Constraint</a>
                    </li>  
                    

                    

                  

                  </ul>
                </li>
              

              
                <li class="nav properties">
                  <ul>
                    <li><h5>Properties:</h5></li>
                  
                    
                
                    <li>
                      <a href="#property.query.Query">Query</a>
                    </li>
                  
                    
                
                    <li>
                      <a href="#property.query.Constraint">Constraint</a>
                    </li>
                  
                    
                
                    <li>
                      <a href="#property.query.collection">collection</a>
                    </li>
                  
                    
                
                    <li>
                      <a href="#property.query.adapters">adapters</a>
                    </li>
                  
                    
                
                    <li>
                      <a href="#property.query.filter">filter</a>
                    </li>
                  
                    
                
                    <li>
                      <a href="#property.query.validate">validate</a>
                    </li>
                  
                    
                
                    <li>
                      <a href="#property.query.exports">exports</a>
                    </li>
                  
                    
                
                    <li>
                      <a href="#property.query.exports">exports</a>
                    </li>
                  
                    
                
                    <li>
                      <a href="#property.query.exports">exports</a>
                    </li>
                  
                    
                
                    <li>
                      <a href="#property.query.exports">exports</a>
                    </li>
                  
                    
                
                    <li>
                      <a href="#property.query.exports">exports</a>
                    </li>
                  
                  </ul>             
                </li>
              
              
              
                <li class="nav methods">
                  <ul>
                  <li><h5>Methods:</h5></li>
                  
                    
                   
                    <li>
                      <a href="#method.query.query">query</a>
                    </li>
                  
                    
                   
                    <li>
                      <a href="#method.query.queryAttr">queryAttr</a>
                    </li>
                  
                    
                   
                    <li>
                      <a href="#method.query.filter">filter</a>
                    </li>
                  
                    
                   
                    <li>
                      <a href="#method.query.subscriber">subscriber</a>
                    </li>
                  
                    
                   
                    <li>
                      <a href="#method.query.validate">validate</a>
                    </li>
                  
                    
                   
                    <li>
                      <a href="#method.query.validate">validate</a>
                    </li>
                  
                  </ul>
                </li>
              

            </ul>  


            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a class="mod-link" href="#template-module">template</a></h4></li>
            <li>  
              <ul class="module-items">
              

              
                <li class="nav properties">
                  <ul>
                    <li><h5>Properties:</h5></li>
                  
                    
                
                    <li>
                      <a href="#property.template.collection">collection</a>
                    </li>
                  
                    
                
                    <li>
                      <a href="#property.template.compile">compile</a>
                    </li>
                  
                  </ul>             
                </li>
              
              
              
                <li class="nav methods">
                  <ul>
                  <li><h5>Methods:</h5></li>
                  
                    
                   
                    <li>
                      <a href="#method.template.template">template</a>
                    </li>
                  
                    
                   
                    <li>
                      <a href="#method.template.compile">compile</a>
                    </li>
                  
                    
                   
                    <li>
                      <a href="#method.template.appendDirective">appendDirective</a>
                    </li>
                  
                    
                   
                    <li>
                      <a href="#method.template.createEachFn">createEachFn</a>
                    </li>
                  
                    
                   
                    <li>
                      <a href="#method.template.createDirectivesFn">createDirectivesFn</a>
                    </li>
                  
                    
                   
                    <li>
                      <a href="#method.template.priority">priority</a>
                    </li>
                  
                  </ul>
                </li>
              

            </ul>  


            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a class="mod-link" href="#validator-module">validator</a></h4></li>
            <li>  
              <ul class="module-items">
              

              
                <li class="nav properties">
                  <ul>
                    <li><h5>Properties:</h5></li>
                  
                    
                
                    <li>
                      <a href="#property.validator.collection">collection</a>
                    </li>
                  
                    
                
                    <li>
                      <a href="#property.validator.exports">exports</a>
                    </li>
                  
                  </ul>             
                </li>
              
              
              
                <li class="nav methods">
                  <ul>
                  <li><h5>Methods:</h5></li>
                  
                    
                   
                    <li>
                      <a href="#method.validator.validator">validator</a>
                    </li>
                  
                    
                   
                    <li>
                      <a href="#method.validator.validators">validators</a>
                    </li>
                  
                  </ul>
                </li>
              

            </ul>  


            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a class="mod-link" href="#content-module">content</a></h4></li>
            <li>  
              <ul class="module-items">
              
                <li class="nav classes">
                  <ul>
                    <li><h5>Classes:</h5></li>
                  
                    
                    <li>
                      <a href="#class.content.Content">Content</a>
                    </li>  
                    

                    

                  

                  </ul>
                </li>
              

              
                <li class="nav properties">
                  <ul>
                    <li><h5>Properties:</h5></li>
                  
                    
                
                    <li>
                      <a href="#property.content.collection">collection</a>
                    </li>
                  
                  </ul>             
                </li>
              
              
              
                <li class="nav methods">
                  <ul>
                  <li><h5>Methods:</h5></li>
                  
                    
                   
                    <li>
                      <a href="#method.content.content">content</a>
                    </li>
                  
                    
                   
                    <li>
                      <a href="#method.content.findAttr">findAttr</a>
                    </li>
                  
                    
                   
                    <li>
                      <a href="#method.content.findAction">findAction</a>
                    </li>
                  
                  </ul>
                </li>
              

            </ul>  


            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a class="mod-link" href="#element-module">element</a></h4></li>
            <li>  
              <ul class="module-items">
              

              
                <li class="nav properties">
                  <ul>
                    <li><h5>Properties:</h5></li>
                  
                    
                
                    <li>
                      <a href="#property.element.collection">collection</a>
                    </li>
                  
                  </ul>             
                </li>
              
              
              
                <li class="nav methods">
                  <ul>
                  <li><h5>Methods:</h5></li>
                  
                    
                   
                    <li>
                      <a href="#method.element.element">element</a>
                    </li>
                  
                  </ul>
                </li>
              

            </ul>  


            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a class="mod-link" href="#resource-module">resource</a></h4></li>
            <li>  
              <ul class="module-items">
              
                <li class="nav classes">
                  <ul>
                    <li><h5>Classes:</h5></li>
                  
                    
                    <li>
                      <a href="#class.resource.Resource">Resource</a>
                    </li>  
                    

                    

                  

                  </ul>
                </li>
              

              
                <li class="nav properties">
                  <ul>
                    <li><h5>Properties:</h5></li>
                  
                    
                
                    <li>
                      <a href="#property.resource.collection">collection</a>
                    </li>
                  
                    
                
                    <li>
                      <a href="#property.resource.validator">validator</a>
                    </li>
                  
                  </ul>             
                </li>
              
              
              
                <li class="nav methods">
                  <ul>
                  <li><h5>Methods:</h5></li>
                  
                    
                   
                    <li>
                      <a href="#method.resource.resource">resource</a>
                    </li>
                  
                  </ul>
                </li>
              

            </ul>  


            </li>
          </ul>
        </li>
        
        
        <li>
          <ul class="module">
            <li><h4><a class="mod-link" href="#text-module">text</a></h4></li>
            <li>  
              <ul class="module-items">
              

              
              
              
                <li class="nav methods">
                  <ul>
                  <li><h5>Methods:</h5></li>
                  
                    
                   
                    <li>
                      <a href="#method.text.text">text</a>
                    </li>
                  
                    
                   
                    <li>
                      <a href="#method.text.Text">Text</a>
                    </li>
                  
                  </ul>
                </li>
              

            </ul>  


            </li>
          </ul>
        </li>
        
      </ul>
    </div>

    <div class="span8 offset3 right-panel-info">
      <!--<pre>[
    {
        &quot;tags&quot;: [
            {
                &quot;type&quot;: &quot;class&quot;,
                &quot;string&quot;: &quot;&quot;
            },
            {
                &quot;type&quot;: &quot;&quot;,
                &quot;string&quot;: &quot;&quot;
            },
            {
                &quot;type&quot;: &quot;param&quot;,
                &quot;types&quot;: [
                    &quot;String&quot;
                ],
                &quot;name&quot;: &quot;An&quot;,
                &quot;description&quot;: &quot;adapter name.&quot;
            }
        ],
        &quot;description&quot;: {
            &quot;full&quot;: &quot;&lt;p&gt;Class representing an abstraction over remote services and databases.&lt;/p&gt;&quot;,
            &quot;summary&quot;: &quot;&lt;p&gt;Class representing an abstraction over remote services and databases.&lt;/p&gt;&quot;,
            &quot;body&quot;: &quot;&quot;
        },
        &quot;isPrivate&quot;: false,
        &quot;ignore&quot;: false,
        &quot;code&quot;: &quot;function Adapter(name) {\n  this.name = name;\n  this.context = this;\n  this.types = {};\n  this.settings = {};\n  // XXX\n  this.resources = {};\n  this.connections = {};\n  //this.resource = this.resource.bind(this);\n  // XXX: refactor, should handle namespacing.\n  this.resource = resource.ns(name);\n  this.action = stream.ns(name);\n  // XXX: todo\n  // this.type = type.ns(name);\n\n  // make queryable.\n  // XXX: add to `clear` for both (or something like).\n  query.use(this);\n}&quot;,
        &quot;ctx&quot;: {
            &quot;type&quot;: &quot;function&quot;,
            &quot;name&quot;: &quot;Adapter&quot;,
            &quot;string&quot;: &quot;Adapter()&quot;
        },
        &quot;methods&quot;: [
            {
                &quot;tags&quot;: [
                    {
                        &quot;type&quot;: &quot;return&quot;,
                        &quot;types&quot;: [
                            &quot;Mixed&quot;
                        ],
                        &quot;description&quot;: &quot;Whatever the implementation of the use function attribute returns.&quot;
                    }
                ],
                &quot;description&quot;: {
                    &quot;full&quot;: &quot;&lt;p&gt;Start a query against this adapter.&lt;/p&gt;&quot;,
                    &quot;summary&quot;: &quot;&lt;p&gt;Start a query against this adapter.&lt;/p&gt;&quot;,
                    &quot;body&quot;: &quot;&quot;
                },
                &quot;isPrivate&quot;: false,
                &quot;ignore&quot;: false,
                &quot;code&quot;: &quot;Adapter.prototype.query = function(){\n  return query().use(this);\n};&quot;,
                &quot;ctx&quot;: {
                    &quot;type&quot;: &quot;method&quot;,
                    &quot;constructor&quot;: &quot;Adapter&quot;,
                    &quot;cons&quot;: &quot;Adapter&quot;,
                    &quot;name&quot;: &quot;query&quot;,
                    &quot;string&quot;: &quot;Adapter.prototype.query()&quot;
                }
            },
            {
                &quot;tags&quot;: [
                    {
                        &quot;type&quot;: &quot;param&quot;,
                        &quot;types&quot;: [
                            &quot;String&quot;
                        ],
                        &quot;name&quot;: &quot;name&quot;,
                        &quot;description&quot;: &quot;An adapter name.&quot;
                    }
                ],
                &quot;description&quot;: {
                    &quot;full&quot;: &quot;&lt;p&gt;Use database/connection (config).&lt;/p&gt;&quot;,
                    &quot;summary&quot;: &quot;&lt;p&gt;Use database/connection (config).&lt;/p&gt;&quot;,
                    &quot;body&quot;: &quot;&quot;
                },
                &quot;isPrivate&quot;: false,
                &quot;ignore&quot;: false,
                &quot;code&quot;: &quot;Adapter.prototype.use = function(name){\n  throw new Error('Adapter#use not implemented');\n};&quot;,
                &quot;ctx&quot;: {
                    &quot;type&quot;: &quot;method&quot;,
                    &quot;constructor&quot;: &quot;Adapter&quot;,
                    &quot;cons&quot;: &quot;Adapter&quot;,
                    &quot;name&quot;: &quot;use&quot;,
                    &quot;string&quot;: &quot;Adapter.prototype.use()&quot;
                }
            },
            {
                &quot;tags&quot;: [
                    {
                        &quot;type&quot;: &quot;param&quot;,
                        &quot;types&quot;: [
                            &quot;String&quot;
                        ],
                        &quot;name&quot;: &quot;name&quot;,
                        &quot;description&quot;: &quot;An adapter name.&quot;
                    },
                    {
                        &quot;type&quot;: &quot;param&quot;,
                        &quot;types&quot;: [
                            &quot;Object&quot;
                        ],
                        &quot;name&quot;: &quot;options&quot;,
                        &quot;description&quot;: &quot;Adapter options.&quot;
                    },
                    {
                        &quot;type&quot;: &quot;&quot;,
                        &quot;string&quot;: &quot;&quot;
                    },
                    {
                        &quot;type&quot;: &quot;api&quot;,
                        &quot;visibility&quot;: &quot;public&quot;
                    }
                ],
                &quot;description&quot;: {
                    &quot;full&quot;: &quot;&lt;p&gt;Define connection settings.&lt;/p&gt;&quot;,
                    &quot;summary&quot;: &quot;&lt;p&gt;Define connection settings.&lt;/p&gt;&quot;,
                    &quot;body&quot;: &quot;&quot;
                },
                &quot;isPrivate&quot;: false,
                &quot;ignore&quot;: false,
                &quot;code&quot;: &quot;Adapter.prototype.connection = function(name, options){\n  if (1 === arguments.length &amp;&amp; 'string' == typeof name) {\n    setting = this.context = settings[name]\n    return this;\n  }\n\n  if ('object' === typeof name) options = name;\n  options || (options = {});\n  options.name || (options.name = name);\n  setting = this.context = settings[options.name] = options;\n\n  return this;\n};&quot;,
                &quot;ctx&quot;: {
                    &quot;type&quot;: &quot;method&quot;,
                    &quot;constructor&quot;: &quot;Adapter&quot;,
                    &quot;cons&quot;: &quot;Adapter&quot;,
                    &quot;name&quot;: &quot;connection&quot;,
                    &quot;string&quot;: &quot;Adapter.prototype.connection()&quot;
                }
            },
            {
                &quot;tags&quot;: [
                    {
                        &quot;type&quot;: &quot;chainable&quot;,
                        &quot;string&quot;: &quot;&quot;
                    },
                    {
                        &quot;type&quot;: &quot;param&quot;,
                        &quot;types&quot;: [
                            &quot;String&quot;
                        ],
                        &quot;name&quot;: &quot;name&quot;,
                        &quot;description&quot;: &quot;An adapter name.&quot;
                    },
                    {
                        &quot;type&quot;: &quot;return&quot;,
                        &quot;types&quot;: [
                            &quot;Adapter&quot;
                        ],
                        &quot;description&quot;: &quot;self.&quot;
                    },
                    {
                        &quot;type&quot;: &quot;api&quot;,
                        &quot;visibility&quot;: &quot;public&quot;
                    }
                ],
                &quot;description&quot;: {
                    &quot;full&quot;: &quot;&lt;p&gt;Datatype serialization.&lt;/p&gt;&quot;,
                    &quot;summary&quot;: &quot;&lt;p&gt;Datatype serialization.&lt;/p&gt;&quot;,
                    &quot;body&quot;: &quot;&quot;
                },
                &quot;isPrivate&quot;: false,
                &quot;ignore&quot;: false,
                &quot;code&quot;: &quot;Adapter.prototype.type = function(name){\n  this.context =\n    this.types[name] || (this.types[name] = type(this.name + '.' + name));\n  return this;\n};&quot;,
                &quot;ctx&quot;: {
                    &quot;type&quot;: &quot;method&quot;,
                    &quot;constructor&quot;: &quot;Adapter&quot;,
                    &quot;cons&quot;: &quot;Adapter&quot;,
                    &quot;name&quot;: &quot;type&quot;,
                    &quot;string&quot;: &quot;Adapter.prototype.type()&quot;
                }
            },
            {
                &quot;tags&quot;: [
                    {
                        &quot;type&quot;: &quot;chainable&quot;,
                        &quot;string&quot;: &quot;&quot;
                    },
                    {
                        &quot;type&quot;: &quot;param&quot;,
                        &quot;types&quot;: [
                            &quot;String&quot;
                        ],
                        &quot;name&quot;: &quot;name&quot;,
                        &quot;description&quot;: &quot;An adapter name.&quot;
                    },
                    {
                        &quot;type&quot;: &quot;return&quot;,
                        &quot;types&quot;: [
                            &quot;Adapter&quot;
                        ],
                        &quot;description&quot;: &quot;self.&quot;
                    }
                ],
                &quot;description&quot;: {
                    &quot;full&quot;: &quot;&lt;p&gt;Delegate to &lt;code&gt;type&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;XXX: This may just actually become the &lt;code&gt;type&lt;/code&gt; object itself.&lt;/p&gt;&quot;,
                    &quot;summary&quot;: &quot;&lt;p&gt;Delegate to &lt;code&gt;type&lt;/code&gt;.&lt;/p&gt;&quot;,
                    &quot;body&quot;: &quot;&lt;p&gt;XXX: This may just actually become the &lt;code&gt;type&lt;/code&gt; object itself.&lt;/p&gt;&quot;
                },
                &quot;isPrivate&quot;: false,
                &quot;ignore&quot;: false,
                &quot;code&quot;: &quot;Adapter.prototype.serializer = function(name){\n  // `this.types[x] === this.context`\n  this.context.serializer(name);\n  return this;\n};\n\nAdapter.prototype.to = function(fn){\n  this.context.to(fn);\n  return this;\n};\n\nAdapter.prototype.from = function(fn){\n  this.context.from(fn);\n  return this;\n};\n\nAdapter.prototype.exec = function(query, fn){\n  throw new Error('Adapter#exec not implemented.');\n};&quot;,
                &quot;ctx&quot;: {
                    &quot;type&quot;: &quot;method&quot;,
                    &quot;constructor&quot;: &quot;Adapter&quot;,
                    &quot;cons&quot;: &quot;Adapter&quot;,
                    &quot;name&quot;: &quot;serializer&quot;,
                    &quot;string&quot;: &quot;Adapter.prototype.serializer()&quot;
                }
            },
            {
                &quot;tags&quot;: [
                    {
                        &quot;type&quot;: &quot;chainable&quot;,
                        &quot;string&quot;: &quot;&quot;
                    },
                    {
                        &quot;type&quot;: &quot;return&quot;,
                        &quot;types&quot;: [
                            &quot;Adapter&quot;
                        ],
                        &quot;description&quot;: &quot;self.&quot;
                    }
                ],
                &quot;description&quot;: {
                    &quot;full&quot;: &quot;&lt;p&gt;Reset the context to &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;&quot;,
                    &quot;summary&quot;: &quot;&lt;p&gt;Reset the context to &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;&quot;,
                    &quot;body&quot;: &quot;&quot;
                },
                &quot;isPrivate&quot;: false,
                &quot;ignore&quot;: false,
                &quot;code&quot;: &quot;Adapter.prototype.self = function(){\n  return this.context = this;\n};\n\nexports.api = function(name, fn){\n  ['connect', 'disconnect'].forEach(function(method){\n    fn[method] = function(){\n      return fn()[method].apply(adapter(name), arguments);\n    }\n  });\n};&quot;,
                &quot;ctx&quot;: {
                    &quot;type&quot;: &quot;method&quot;,
                    &quot;constructor&quot;: &quot;Adapter&quot;,
                    &quot;cons&quot;: &quot;Adapter&quot;,
                    &quot;name&quot;: &quot;self&quot;,
                    &quot;string&quot;: &quot;Adapter.prototype.self()&quot;
                }
            }
        ],
        &quot;properties&quot;: []
    }
]</pre>-->

      <h1>Docs</h1>
      <div id="api">
        
        
        <div id="adapter-module" class="module">
          <h2>adapter</h2>
        
          <div class="module-content">
          

          <h3>Properties:</h3>
          
            

            

            
              
                
            
              
                
            
              
              
                
                
            
              
              
                
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
                      

            
              
              
            
              
              
            
              
              
            
              

              
            
              <section class="property" id="property.adapter.collection">              
                <h3>adapter.collection</h3>
                <p>Expose <code>collection</code>.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.collection = [];</pre>
              </section>
              
            
              
              
            
              

              
                
              
            
              <section class="property last-section" id="property.adapter.Adapter">              
                <h3>adapter.Adapter</h3>
                <p>Expose <code>Adapter</code> constructor.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.Adapter = Adapter;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            

            

                      

            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.adapter.adapter">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  adapter.adapter(name)
                </h3>
                <h5>Description:</h5>
                <p>Lazily get an adapter instance by <code>name</code>.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} An adapter name.<br/>
                
                  return {Adapter} An adapter.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function adapter(name) {
  if (exports.collection[name]) return exports.collection[name];
  if (exports.load(name)) return exports.collection[name];

  var obj = new Adapter(name);
  exports.collection[name] = obj;
  // exports.collection.push(obj);
  // XXX: if has any event listeners...
  exports.emit('define', obj);
  exports.emit('define ' + name, obj);
  return obj;
}</pre>
              </section>
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.adapter.load">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  adapter.load(name)
                </h3>
                <h5>Description:</h5>
                <p>Lazy-load adapters.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} An adapter name.<br/>
                
                   {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.load = function(name, path){
  return 1 === arguments.length
    ? load(exports, name)
    : load.apply(load, [exports].concat(Array.prototype.slice.call(arguments)));
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.adapter.exists">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  adapter.exists(name)
                </h3>
                <h5>Description:</h5>
                <p>Check if adapter <code>name</code> exists.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} An adapter name.<br/>
                
                  return {Boolean} true if adapter exists, otherwise false.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.exists = function(name){
  return !!exports.collection[name];
};

// XXX: remove `exists` in favor of `has`.
exports.has = exports.exists;</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.adapter.Adapter">
                
                
                

                
                                              
                

                
                                              
                

                
                  
                   
                 
               
                                              
                
                              
                <h3>
                  adapter.Adapter(An)
                </h3>
                <h5>Description:</h5>
                <p>Class representing an abstraction over remote services and databases.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  class {undefined} undefined<br/>
                
                   {undefined} undefined<br/>
                
                  param {String} adapter name.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function Adapter(name) {
  this.name = name;
  this.context = this;
  this.types = {};
  this.settings = {};
  // XXX
  this.resources = {};
  this.connections = {};
  //this.resource = this.resource.bind(this);
  // XXX: refactor, should handle namespacing.
  this.resource = resource.ns(name);
  this.action = stream.ns(name);
  // XXX: todo
  // this.type = type.ns(name);

  // make queryable.
  // XXX: add to `clear` for both (or something like).
  query.use(this);
}</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.adapter.query">
                
                
                

                
                                              
                
                              
                <h3>
                  adapter.query()
                </h3>
                <h5>Description:</h5>
                <p>Start a query against this adapter.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  return {Mixed} Whatever the implementation of the use function attribute returns.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Adapter.prototype.query = function(){
  return query().use(this);
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.adapter.use">
                
                
                

                
                  
                   
                 
               
                                              
                
                              
                <h3>
                  adapter.use(name)
                </h3>
                <h5>Description:</h5>
                <p>Use database/connection (config).</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} An adapter name.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Adapter.prototype.use = function(name){
  throw new Error('Adapter#use not implemented');
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.adapter.connection">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  adapter.connection(name, options)
                </h3>
                <h5>Description:</h5>
                <p>Define connection settings.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} An adapter name.<br/>
                
                  param {Object} Adapter options.<br/>
                
                   {undefined} undefined<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Adapter.prototype.connection = function(name, options){
  if (1 === arguments.length &amp;&amp; 'string' == typeof name) {
    setting = this.context = settings[name]
    return this;
  }

  if ('object' === typeof name) options = name;
  options || (options = {});
  options.name || (options.name = name);
  setting = this.context = settings[options.name] = options;

  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.adapter.type">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  adapter.type(name)
                </h3>
                <h5>Description:</h5>
                <p>Datatype serialization.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {String} An adapter name.<br/>
                
                  return {Adapter} self.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Adapter.prototype.type = function(name){
  this.context =
    this.types[name] || (this.types[name] = type(this.name + '.' + name));
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.adapter.serializer">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  adapter.serializer(name)
                </h3>
                <h5>Description:</h5>
                <p>Delegate to <code>type</code>.</p>

<p>XXX: This may just actually become the <code>type</code> object itself.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {String} An adapter name.<br/>
                
                  return {Adapter} self.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Adapter.prototype.serializer = function(name){
  // `this.types[x] === this.context`
  this.context.serializer(name);
  return this;
};

Adapter.prototype.to = function(fn){
  this.context.to(fn);
  return this;
};

Adapter.prototype.from = function(fn){
  this.context.from(fn);
  return this;
};

Adapter.prototype.exec = function(query, fn){
  throw new Error('Adapter#exec not implemented.');
};</pre>
              </section>
              
            
              
              
              
              
               
              
              <section class="method last-section" id="method.adapter.self">
                
                
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  adapter.self()
                </h3>
                <h5>Description:</h5>
                <p>Reset the context to <code>this</code>.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  return {Adapter} self.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Adapter.prototype.self = function(){
  return this.context = this;
};

exports.api = function(name, fn){
  ['connect', 'disconnect'].forEach(function(method){
    fn[method] = function(){
      return fn()[method].apply(adapter(name), arguments);
    }
  });
};</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="cookbook-module" class="module">
          <h2>cookbook</h2>
        
          <div class="module-content">
          

          <h3>Properties:</h3>
          
            

            

            
              
                
            
              
                
                      

            
              
              
            
              
              
            
          
            

            

            
              
                
            
              
              
                
                
            
              
                
            
              
                
            
              
                
                      

            
              
              
            
              
              
            
              

              
                
              
            
              <section class="property last-section" id="property.cookbook.lookupDirectories">              
                <h3>cookbook.lookupDirectories</h3>
                <p>Cookbook lookup paths.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.lookupDirectories = [
  fs.join(process.cwd(), 'cookbooks'),
  fs.join(process.cwd(), 'lib/cookbooks'),
  fs.join(process.env.HOME, '.tower/node_modules'),
  fs.join(__dirname, 'examples')
];</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
          
            

            

                      

            
          

          <h3>Methods:</h3>
          
            
            
              
              
              
              
              <section class="method" id="method.cookbook.create">
                
                
                
                              
                <h3>
                  cookbook.create()
                </h3>
                <h5>Description:</h5>
                <p>Example:</p>

<p>tower create cookbook my-cookbook</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.create = function(recipe, args){
  var options = parseArgs(args)
    , projectName = args[4];

  recipe.outputDirectory(options.outputDirectory);
  recipe.set('projectName', projectName);
  recipe.set('strcase', require('tower-strcase'));
  recipe.directory(projectName, function(){
    recipe.template('index.js', 'cookbook.js');
    recipe.template('package.json');
    recipe.template('.gitignore');
    recipe.template('.npmignore');
    recipe.template('README.md', 'README.md');
    recipe.directory('templates');
  });
}

exports.remove = function(recipe, args){
  var options = parseArgs(args);
  recipe.outputDirectory(options.outputDirectory);
  recipe.removeDirectory(args[4]);
}</pre>
              </section>
              
            
              
              
              
              
               
              
              <section class="method last-section" id="method.cookbook.install">
                
                
                
                              
                <h3>
                  cookbook.install()
                </h3>
                <h5>Description:</h5>
                <p>Install a cookbook into $HOME/.tower/node_modules</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.install = function(recipe, args){
  var path = require('path');
  var projectName = args[4];

  process.chdir(path.join(process.env.HOME, '.tower'));

  var spawn = require('child_process').spawn;
  
  spawn('npm', ['install', projectName], { stdio: 'inherit' })
    .on('exit', function(){
      // XXX: need to update the recipe so it looks in node_modules.
    });
}

function parseArgs(args) {
  var options = require('commander')
    .option('-o, --output-directory [value]', 'Output directory', process.cwd())
    .parse(args);

  return options;
}</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.cookbook.find">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  cookbook.find(name, directories)
                </h3>
                <h5>Description:</h5>
                <p>Lookup a single cookbook.</p>

<p>This is resolved from the command line.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} A cookbook name such as `ec2` or `ec2:instance`.<br/>
                
                  param {Array} An array of directory string paths.<br/>
                
                  return {Cookbook} A cookbook.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.find = function(name, directories){
  var parts = name.split(':');
  var key = parts.shift();
  var cookbook;

  // XXX: cache
  //var paths = findOrCreateCookbookPaths();
  //if (paths &amp;&amp; paths[key]) {
  //  
  //}

  directories || (directories = exports.lookupDirectories);

  // XXX: should cache this in ~/.tower/config/packages.json or something.
  directories.forEach(function(directory){
    fs.directoryPathsSync(directory).forEach(function(path){
      var pkg = fs.join(path, 'package.json');
      pkg = fs.existsSync(pkg) &amp;&amp; require(pkg);

      if (pkg &amp;&amp; key === pkg.cookbook) {
        cookbook = require(path);
        // namespace
        cookbook.ns = pkg.cookbook;
        // XXX: where templates are.
        cookbook.sourcePath = fs.join(path, 'templates');
      }

      return !cookbook;
    });

    return !cookbook; // exit if one was found.
  });

  if (!cookbook) {
    console.log('Cookbook [' + name + '] not found.')
    process.exit();
  }

  // nested cookbook.
  if (parts.length) {
    name = parts.join(':');
    if (cookbook.aliases) {
      while (cookbook.aliases[name])
        name = cookbook.aliases[name];
    }
    // XXX: cache these paths, for faster lookup later.
    cookbook = require(cookbook(name));
  }

  return cookbook;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.cookbook.exec">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  cookbook.exec(name, action, args, The)
                </h3>
                <h5>Description:</h5>
                <p>Execute <code>action</code> on recipe <code>name</code>.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} Name of the recipe.<br/>
                
                  param {String} Action (verb) the recipe implements.<br/>
                
                  param {Array} Arguments passed in from the command line (process.argv).<br/>
                
                  param {Function} executed callback.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.exec = function(name, action, args, fn){
  var cookbook = exports.find(name);
  var method = cookbook[action];

  if (!method) {
    console.log('Cookbook [' + name + '] action [' + action + '] is not defined.');
    process.exit();
  }
  
  // XXX: handle source path again.
  var recipe = new Recipe(cookbook.sourcePath);

  // XXX: for nested methods, handle callback.
  if (3 === method.length)
    method.call(recipe, recipe, args, fn || noop);
  else {
    method.call(recipe, recipe, args);
    if (fn) fn();
  }
};</pre>
              </section>
              
            
              
              
              
              
               
              
              <section class="method last-section" id="method.cookbook.findCookbookPaths">
                
                
                

                
                                              
                
                              
                <h3>
                  cookbook.findCookbookPaths()
                </h3>
                <h5>Description:</h5>
                <p>Creates ~/.tower/config/cookbooks.json.</p>

<p>XXX: We should probably generalize <code>cookbooks.json</code><br />     to include more packages.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  return {String} An existin `cookbooks.json` file contents.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function findCookbookPaths() {
  // XXX: refactor
  var path = fs.join(process.env.HOME, '.tower');
  if (!fs.existsSync(path)) fs.mkdirSync(path);
  path = fs.join(path, 'config');
  if (!fs.existsSync(path)) fs.mkdirSync(path);
  path = fs.join(path, 'cookbooks.json');
  if (fs.existsSync(path)) return fs.readFileSync(path);
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="expression-module" class="module">
          <h2>expression</h2>
        
          <div class="module-content">
          

          <h3>Properties:</h3>
          
            

            

            
              
                
            
              
              
                
                
            
              
                
            
              
                
                      

            
              
              
            
              
              
            
              

              
                
              
            
              <section class="property last-section" id="property.expression.exports">              
                <h3>expression.exports</h3>
                <p>Expose <code>expression</code>.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">module.exports = expression;</pre>
              </section>
              
            
              
              
            
              
              
            
          
            

            

                      

            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
              
              
               
              
              <section class="method last-section" id="method.expression.expression">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  expression.expression(val)
                </h3>
                <h5>Description:</h5>
                <p>Parse a directive expression.</p>

<p>XXX: Maybe there are "named" expressions later.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} The directive expression string.<br/>
                
                  return {Function} fn Expression to evaluate<br/>
                
                   {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function expression(val) {
  // property used in this expression.
  var deps = {};
  var fn = Function('scope', '  return ' + parseExpression(val, deps));
  var options = deps._options;
  delete deps._options;
  var keys = [];
  for (var key in deps) keys.push(key);
  fn.deps = keys;
  fn.opts = options;
  return fn;
}

function filterExpression(val) {
  val = val.split(filterRexExp);
  for (var i = 0, n = val.length; i &lt; n; i++) {
    // XXX
    // val[i] = x
  }
  return val
}

function parseExpression(val, deps) {
  return optionsExpression(val, deps)
    || fnExpression(val, deps)
    || operatorExpression(val, deps)
    || propertyExpression(val, deps);
}

function optionsExpression(val, deps) {
  if (!val.match(optionsRegExp)) return;
  var code = parseExpression(RegExp.$1, deps);
  val = RegExp.$2.split(argsRegExp);
  var options = {};
  for (var i = 0, n = val.length; i &lt; n; i++) {
    keyValueExpression(val[i], options);
  }
  deps._options = options;
  return code;
}

// &lt;input on-keypress=&quot;enter:createTodo&quot;&gt;
// &lt;input on-keypress=&quot;enter : createTodo&quot;&gt;
// &lt;input on-keypress=&quot;enter:create(todo)&quot;&gt;
function keyValueExpression(val, options) {
  // XXX: todo
  // val.match(fnRegExp);
  if (!val.match(keyValueRegExp)) return;
  val = RegExp.$2;
  options[RegExp.$1] = numberExpression(val) || val;
}

// &lt;input on-keypress=&quot;create(todo)&quot;&gt;
function fnExpression(val, deps) {
  if (!val.match(fnRegExp)) return;

  var name = RegExp.$1;
  var args = RegExp.$2;
  
  if (args) {
    return &quot;scope.call('&quot; + name + &quot;', &quot; + argumentsExpression(args, deps) + &quot;)&quot;;
  } else {
    return &quot;scope.call('&quot; + name + &quot;')&quot;;
  }
}

function argumentsExpression(val, deps) {
  val = val.split(argsRegExp);
  var result = [];
  for (var i = 0, n = val.length; i &lt; n; i ++) {
    // XXX: special cases: `i`, `event`, `this`.
    result.push(parseExpression(val[i], deps));
  }
  return result.join(', ');
}

function operatorExpression(val, deps) {
  if (!val.match(operatorRegExp)) return;

  var left = RegExp.$1;
  var operator = RegExp.$2;
  var right = RegExp.$3;

  var code = parseExpression(left, deps)
    + ' ' + operator + ' '
    + parseExpression(right, deps);

  return code;
}

function propertyExpression(val, deps) {
  return numberExpression(val, deps)
    || pathExpression(val, deps);
}

function numberExpression(val, deps) {
  if (val.match(numberRegExp)) return parseFloat(val);
}

function pathExpression(val, deps) {
  deps[val] = true;
  return &quot;scope.get('&quot; + val + &quot;')&quot;;
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="route-module" class="module">
          <h2>route</h2>
        
          <div class="module-content">
          

          <h3>Properties:</h3>
          
            

            

            
              
                
            
              
                
            
              
              
                
                
            
              
              
                
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
                      

            
              
              
            
              
              
            
              
              
            
              

              
            
              <section class="property" id="property.route.Route">              
                <h3>route.Route</h3>
                <p>Expose <code>Route</code>.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.Route = Route;</pre>
              </section>
              
            
              
              
            
              

              
                
              
            
              <section class="property last-section" id="property.route.collection">              
                <h3>route.collection</h3>
                <p>Expose <code>collection</code>.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.collection = [];</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            

            

                      

            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.route.route">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  route.route(name, path, options)
                </h3>
                <h5>Description:</h5>
                <p>Find or define a route.</p>

<p>Examples:</p>

<p>route('/posts', 'posts.index')<br />   route('/posts', 'posts.index', 'GET')<br />   route('/posts', 'posts.index', { method: 'GET' })<br />   route('/posts', { name: 'posts.index', method: 'GET' })<br />   route({ path: '/posts', name: 'posts.index', method: 'GET' })<br />   route('posts.index')</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} Route name.<br/>
                
                  param {String} Route path delimited with periods `.`.<br/>
                
                  param {Object} Route options.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function route(name, path, options){
  if (1 === arguments.length &amp;&amp; exports.collection[name])
    return exports.collection[name];

  options || (options = {});

  var fn;

  if ('/' === name.charAt(0)) {
    if ('function' === typeof path)
      fn = path;
    else
      options.name = path;
    options.path = name;
  } else {
    options.name = name;
    options.path = path;
  }

  var instance = new Route(options);
  if (fn) instance.on('request', fn);
  exports.collection[instance.id] = instance;
  exports.collection.push(instance);
  exports.emit('define', instance);
  return instance;
}</pre>
              </section>
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.route.use">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  route.use(fn)
                </h3>
                <h5>Description:</h5>
                <p>Add mixin to exports.collection.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {Function} Function to add to list of mixins.<br/>
                
                  return {Function} self.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.use = function(fn){
  mixins.push(fn);
  return exports;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.route.clear">
                
                
                
                              
                <h3>
                  route.clear()
                </h3>
                <h5>Description:</h5>
                <p>Remove all exports.collection.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.clear = function(){
  mixins.length = 0;
  exports.collection.length = 0;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.route.Route">
                
                
                

                
                                              
                

                
                                              
                

                
                  
                   
                 
               
                                              
                
                              
                <h3>
                  route.Route(options)
                </h3>
                <h5>Description:</h5>
                <p>Class representing a route.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  class {undefined} undefined<br/>
                
                   {undefined} undefined<br/>
                
                  param {Object} Route options.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function Route(options){
  this.context = this;
  this.id = this.name = options.name;
  this.path = options.path;
  this.method = options.method || 'GET';
  this.regexp = pathToRegexp(
    options.path,
    this.keys = [],
    options.sensitive,
    options.strict);

  this.formats = {};
  this.params = [];
  this.accepts = [];
  this.middlewares = [];
  this.validators = [];
  this.actions = {
    enter: [],
    exit: [],
    request: [],
    connect: [],
    disconnect: []
  };
}</pre>
              </section>
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.route.param">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  route.param(name, type)
                </h3>
                <h5>Description:</h5>
                <p>Specify how to parse a URL parameter.</p>

<p>This is roughly equivalent to an attribute<br />on a model, e.g. <code>model('Post').attr(x)</code>.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} A param name.<br/>
                
                  param {String} A param type.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Route.prototype.param = function(name, type, options){
  this.context = this.params[name] = param(name, type, options);
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.route.validate">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  route.validate(key, val)
                </h3>
                <h5>Description:</h5>
                <p>Define a validator.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} Name of the operator for assertion.<br/>
                
                  param {Mixed} <br/>
                
                  return {this} <br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Route.prototype.validate = function(key, val){
  if (this === this.context)
    // key is a function
    this.validator(key, val)
  else
    // param or attr
    this.context.validator(key, val);

  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.route.validator">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  route.validator(fn)
                </h3>
                <h5>Description:</h5>
                <p>Append a validator function to the stack.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Function} <br/>
                
                  return {this} <br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.validator = function(fn){
  // XXX: just a function in this case, but could handle more.
  this.validators.push(fn);
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.route.type">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  route.type(type)
                </h3>
                <h5>Description:</h5>
                <p>The accepted HTTP methods.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {Object} <br/>
                
                  return {Route} self.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Route.prototype.type = function(type){
  // maybe it should accept an array?
  this.method = type;
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.route.use">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  route.use(fn)
                </h3>
                <h5>Description:</h5>
                <p>Add a function to process the incoming request.</p>

<p>If called multiple times they will be executed<br />in sequence. They can be asynchronous, just<br />pass a <code>done</code> argument to <code>fn</code>.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {Function} A function to process the incoming request.<br/>
                
                  return {Route} self.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Route.prototype.use = function(fn){
  this.middlewares.push(fn);
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.route.accept">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  route.accept(arguments)
                </h3>
                <h5>Description:</h5>
                <p>Accepted <code>Content-Type</code>s.</p>

<p>If not specified, it will accept any.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {Arguments} The default JavaScript function argument list.<br/>
                
                  return {Route} self.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Route.prototype.accept = function(){
  var n = arguments.length
  var accepts = new Array(n);

  for (var i = 0; i &lt; n; i++)
    this.accepts.push(arguments[i]);

  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.route.format">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  route.format(name, fn)
                </h3>
                <h5>Description:</h5>
                <p>Specify how to format the data for the response.</p>

<p>Example:</p>

<p>route('/', 'index')<br />     .format('json', function(content){<br />       content.render({ hello: 'world' });<br />     })</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {String} The data format name.<br/>
                
                  param {Function} The function to respond to the data format.<br/>
                
                  return {Route} self.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Route.prototype.format = function(name, fn){
  if ('function' === typeof name) {
    this.formats['*'] = name;
  } else {
    this.formats[name] = fn;
    this.accepts.push(name);
  }

  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.route.action">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  route.action(Action)
                </h3>
                <h5>Description:</h5>
                <p>Add an action to the actions list.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {name} name.<br/>
                
                  return {Route} self.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Route.prototype.action = function(name){
  var action = this.actions[name] || (this.actions[name] = []);

  for (var i = 1, n = arguments.length; i &lt; n; i++) {
    action.push(arguments[i]);
  }

  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.route.self">
                
                
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  route.self()
                </h3>
                <h5>Description:</h5>
                <p>Clear the chainable API context.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  return {Route} self.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Route.prototype.self = function(){
  context = this;
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.route.match">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  route.match(path, params)
                </h3>
                <h5>Description:</h5>
                <p>Check if this route matches <code>path</code>, if so<br />populate <code>params</code>.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} A path.<br/>
                
                  param {Array} Array of param objects.<br/>
                
                  return {Boolean} true if this route matches `path`, else false.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Route.prototype.match = function(path, params){
  var keys = this.keys;
  var qsIndex = path.indexOf('?');
  var pathname = ~qsIndex ? path.slice(0, qsIndex) : path;
  var m = this.regexp instanceof RegExp
    ? this.regexp.exec(pathname)
    : new RegExp(this.regexp).exec(pathname);

  if (!m) return false;

  for (var i = 1, n = m.length; i &lt; n; ++i) {
    var key = keys[i - 1];

    var val = 'string' == typeof m[i]
      ? decodeURIComponent(m[i])
      : m[i];

    if (key) {
      params[key.name] = params.hasOwnProperty(key.name) &amp;&amp; undefined !== params[key.name]
        ? params[key.name]
        : val;
    } else {
      params.push(val);
    }
  }

  return true;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.route.handle">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  route.handle(context, next)
                </h3>
                <h5>Description:</h5>
                <p>Process a request given a context.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Context} <br/>
                
                  param {Function} Function used to handle non-matching context path and params.<br/>
                
                  return {Boolean} true if a request can be processed, else falsy.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Route.prototype.handle = function(context, next){
  if (!this.match(context.path, context.params))
    return next();

  this.parseParams(context);

  context.event || (context.event = 'request');
  context.route = this;

  // TODO: defaults for exports.collection?
  // if (this._enter.length) {
  var self = this;

  try {
    var callbacks = self.middlewares.concat(
      self.actions['enter'],
      self.actions[context.event],
      self.formats['*'] ? [self.formats['*']] : []
    );

    // req.accepted[0].subtype
    // req.ip
    // http://expressjs.com/api.html
    // req.xhr
    // req.subdomains
    // req.acceptedLanguages for tower-inflector
    // TODO: handle multiple formats.
    series(callbacks, context, next, self);
  } catch (e) {
    //self.emit(500, e);
    // Errors that occurs won't be caught but an error
    // within the `series` method will.
    throw e;
    context.error = e;
    series(self.actions['500'], context, function(){}, self)
  }
  
  return true;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.route.parseParams">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  route.parseParams(context)
                </h3>
                <h5>Description:</h5>
                <p>Parse the params from a given context.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Context} A context.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Route.prototype.parseParams = function(context){
  for (var key in this.params) {
    if (context.params.hasOwnProperty(key)) {
      // XXX: serialize params
      // tower-type
      context.params[key] = parseInt(context.params[key], 10);
    }
  }
};</pre>
              </section>
              
            
              
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="type-module" class="module">
          <h2>type</h2>
        
          <div class="module-content">
          

          <h3>Properties:</h3>
          
            

            

            
              
                
            
              
                
            
              
              
                
                
            
              
              
                
                
            
              
              
                
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
                      

            
              
              
            
              
              
            
              
              
            
              

              
            
              <section class="property" id="property.type.Type">              
                <h3>type.Type</h3>
                <p>Expose <code>Type</code>.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.Type = Type;</pre>
              </section>
              
            
              
              
            
              

              
            
              <section class="property" id="property.type.collection">              
                <h3>type.collection</h3>
                <p>Expose <code>collection</code>.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.collection = [];</pre>
              </section>
              
            
              
              
            
              

              
                
              
            
              <section class="property last-section" id="property.type.validator">              
                <h3>type.validator</h3>
                <p>Expose <code>validator</code>.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.validator = validator.ns('type');</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            

            

            
              
                
            
              
              
                
                
            
              
                
                      

            
              
              
            
              
              
            
              

              
                
              
            
              <section class="property last-section" id="property.type.exports">              
                <h3>type.exports</h3>
                <p>Expose <code>types</code>.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">module.exports = types;</pre>
              </section>
              
            
              
              
            
          
            

            

                      

            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.type.type">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  type.type(name, fn)
                </h3>
                <h5>Description:</h5>
                <p>Define or get a type.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} Type name.<br/>
                
                  param {Function} A function added to a list of sanitizors that sanitizes the type.<br/>
                
                  return {Type} A type.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function type(name, fn) {
  if (undefined === fn &amp;&amp; exports.collection[name])
      return exports.collection[name];

  var instance = new Type(name, fn);
  exports.collection[name] = instance;
  exports.collection.push(instance);
  exports.emit('define', name, instance);
  return instance;
}</pre>
              </section>
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.type.has">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  type.has(name)
                </h3>
                <h5>Description:</h5>
                <p>Check if validator exists.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} Type name.<br/>
                
                  return {Boolean} true if `Type` exists, else false.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.has = function(name){
  return !!exports.collection[name];
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.type.ns">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  type.ns(ns)
                </h3>
                <h5>Description:</h5>
                <p>Scope validators to a namespace.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} A namespace<br/>
                
                  return {Function} A function that returns a namespaced exports object.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.ns = function(ns){
  return function type(name, fn) {
    return exports(ns + '.' + name, fn);
  }
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.type.clear">
                
                
                

                
                                              
                
                              
                <h3>
                  type.clear()
                </h3>
                <h5>Description:</h5>
                <p>Remove all validators.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  return {Function} Module exports `type` function.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.clear = function(){
  var collection = exports.collection;

  exports.off();
  for (var key in collection) {
    if (collection.hasOwnProperty(key)) {
      delete collection[key];
    }
  }
  collection.length = 0;
  return exports;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.type.Type">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                
                              
                <h3>
                  type.Type(name, fn)
                </h3>
                <h5>Description:</h5>
                <p>Class representing a type.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  class {undefined} undefined<br/>
                
                  param {String} A type name.<br/>
                
                  param {Function} A function added to a list of sanitizors that sanitizes the type.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function Type(name, fn) {
  // XXX: name or path? maybe both.
  this.name = name;
  // XXX: or maybe just delegate:
  // this.validator = type.validator.ns(name);
  // that might reduce memory quite a bit.
  // even though it's still only a tiny bit of it.
  this.validators = [];
  // serialization/sanitization function.
  if (fn) this.use(fn);
}</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.type.validator">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  type.validator(A, fn)
                </h3>
                <h5>Description:</h5>
                <p>Add a validator function to a type.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {String} validator name<br/>
                
                  param {Function} A validator function.<br/>
                
                  returns {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Type.prototype.validator = function(name, fn){
  // XXX: see above, this should probably just
  // be happening in `validator.ns(this.name)`.
  exports.validator(this.name + '.' + name, fn);
  this.validators.push(this.validators[name] = fn);
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.type.use">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  type.use(fn)
                </h3>
                <h5>Description:</h5>
                <p>Sanitize functions to pass value through.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {Function} A sanitizor function.<br/>
                
                  return {Type} this.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Type.prototype.use = function(fn){
  (this.sanitizers || (this.sanitizers = [])).push(fn);
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.type.sanitize">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  type.sanitize(val)
                </h3>
                <h5>Description:</h5>
                <p>Sanitize (or maybe <code>serialize</code>).</p>

<p>XXX: maybe rename to <code>cast</code>?</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Mixed} A value to sanitize.<br/>
                
                  return {Mixed} The value sanitized.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Type.prototype.sanitize = function(val){
  if (!this.sanitizers) return val;

  this.sanitizers.forEach(function sanitize(sanitizer){
    val = sanitizer(val);
  });

  return val;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.type.serializer">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  type.serializer(name)
                </h3>
                <h5>Description:</h5>
                <p>Seralizer object by name.</p>

<p>XXX: Maybe refactor into <code>tower/serializer</code> module.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {String} Object name.<br/>
                
                  return {Type} this.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Type.prototype.serializer = function(name){
  this.context = (this.serializers || (this.serializers = {}))[name] = {};
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.type.to">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  type.to(fn)
                </h3>
                <h5>Description:</h5>
                <p>Define how to serialize type from<br />JavaScript to external API/service request format.</p>

<p>XXX: to/out/request/serialize/format/use</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {Function} Function to handle serialization.<br/>
                
                  return {Type} this.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Type.prototype.to = function(fn){
  // XXX: some way to set a default serializer.
  if (!this.context) this.serializer('default');
  this.context.to = fn;
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.type.from">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  type.from(fn)
                </h3>
                <h5>Description:</h5>
                <p>Define how to deserialize type from <br />external API/service request format to JavaScript.</p>

<p>XXX: from/in/response/deserialize</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {Function} Function to handle deserialization.<br/>
                
                  return {Type} this.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Type.prototype.from = function(fn){
  if (!this.context) this.serializer('default');
  this.context.from = fn;
  return this;
};</pre>
              </section>
              
            
              
              
              
              
               
              
              <section class="method last-section" id="method.type.type">
                
                
                

                
                  
                   
                 
               
                                              
                
                              
                <h3>
                  type.type(A)
                </h3>
                <h5>Description:</h5>
                <p>Bring back to parent context.</p>

<p>XXX: need more robust way to do this across modules.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} type name.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Type.prototype.type = function(name){

};

types(exports);</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
              
              
              
              
               
              
              <section class="method last-section" id="method.type.types">
                
                
                

                
                  
                   
                 
               
                                              
                
                              
                <h3>
                  type.types(The)
                </h3>
                <h5>Description:</h5>
                <p>Define basic types and type validators.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Function} type module.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function types(type) {
  // XXX: type('string').validator('lte')
  // would default to `validator('gte')` if not explicitly defined.
  type('string')
    .use(String)
    .validator('gte', function gte(a, b){
      return a.length &gt;= b.length;
    })
    .validator('gt', function gt(a, b){
      return a.length &gt; b.length;
    });

  type('id');

  type('integer')
    .use(parseInt);

  type('float')
    .use(parseFloat);

  type('decimal')
    .use(parseFloat);

  type('number')
    .use(parseFloat);
    
  type('date')
    .use(parseDate);

  type('boolean')
    .use(parseBoolean);

  type('array')
    // XXX: test? test('asdf') // true/false if is type.
    // or `validate`
    .use(function(val){
      // XXX: handle more cases.
      return isArray(val)
        ? val
        : val.split(/,\s*/);
    })
    .validator('lte', function lte(a, b){
      return a.length &lt;= b.length;
    });

  function parseDate(val) {
    return isDate(val)
      ? val
      : new Date(val);
  }

  function parseBoolean(val) {
    // XXX: can be made more robust
    return !!val;
  }
}

// XXX: refactor to `part`
function isDate(val) {
  return '[object Date]' === Object.prototype.toString.call(val);
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="cli-module" class="module">
          <h2>cli</h2>
        
          <div class="module-content">
          

          <h3>Properties:</h3>
          
            

            

            
              
                
            
              
                
                      

            
              
              
            
              
              
            
          
            

            

            
              
                
            
              
              
                
                
            
              
              
                
                
            
              
              
                
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
              
                
                
            
              
                
            
              
                
            
              
                
            
              
                
                      

            
              
              
            
              
              
            
              

              
            
              <section class="property" id="property.cli.verbs">              
                <h3>cli.verbs</h3>
                <p>Verbs to use with recipes.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.verbs = [
  'build',
  'create',
  'remove',
  'install',
  'uninstall',
  'list',
  'exec',
  'start',
  'stop',
  'connect',
  'enter',
  'shutdown',
  'describe',
  'find',
  'save',
  'show',
  'setup',
  'read',
  'update',
  'bootstrap',
  'clean',
  'clear',
  'help',
  'fetch',
  'add'
];</pre>
              </section>
              
            
              
              
            
              

              
            
              <section class="property" id="property.cli.commands">              
                <h3>cli.commands</h3>
                <p>List of available commands.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.commands = [
  'info',
  'server',
  'console',
  'generate',
  'create',
  'remove',
  'list',
  'init',
  'search',
  'publish',
  'watch'
].concat(exports.verbs);</pre>
              </section>
              
            
              
              
            
              

              
            
              <section class="property" id="property.cli.aliases">              
                <h3>cli.aliases</h3>
                <p>Command aliases.</p>   
                
                 <p class="params-info">
                
                  see {undefined} undefined<br/>
                
                </p>            
                <pre class="js">exports.aliases = {
  c: 'console',
  g: 'generate',
  s: 'server',
  'new': 'init',
  generate: 'create',
  shutdown: 'stop',
  rm: 'remove'
  // list: 'find'
};</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              

              
                
              
            
              <section class="property last-section" id="property.cli.version">              
                <h3>cli.version</h3>
                <p>Tower version.</p>   
                
                 <p class="params-info">
                
                  api {undefined} undefined<br/>
                
                </p>            
                <pre class="js">exports.version = version;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            

            

                      

            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.cli.run">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  cli.run(argv)
                </h3>
                <h5>Description:</h5>
                <p>Entrance point to running tower commands.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Array} The command-line arguments list.<br/>
                
                  return {Mixed} The specified command return value.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.run = function(argv){
  var command = argv[2];
  // Shorten the `node app.js server` call to `node app.js`
  if (argv[1].indexOf('.') !== -1) command = 'server';

  if (!command || command.match(/^-/)) command = 'info';
  command = exports.alias(command);

  if (!command || !command.match(new RegExp('^' + exports.commands.join('|') + '$')))
    return unknownCommand(command);

  return exports[command](argv);
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.cli.alias">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  cli.alias(name)
                </h3>
                <h5>Description:</h5>
                <p>Get command name from an alias.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} Alias name.<br/>
                
                  return {String} Command name.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.alias = function(name){
  while (exports.aliases[name])
    name = exports.aliases[name];

  return name;
};</pre>
              </section>
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.cli.info">
                
                
                

                
                                              
                
                              
                <h3>
                  cli.info()
                </h3>
                <h5>Description:</h5>
                <p>tower info</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.info = function(argv){
  console.log([
    '',
    '  Usage: tower &lt;command&gt; &lt;cookbook&gt; [options]',
    '',
    '  Options:',
    '',
    '    -h, --help     output usage information',
    '    -V, --version  output the version number',
    '',
    '  Commands:',
    '',
    '    console                    enter tower interactive console',
    '    info &lt;name&gt; [prop]         output json cookbook information',
    '    create &lt;cookbook&gt; &lt;name&gt;   execute `create` action for cookbook',
    ''
  ].join(&quot;\n&quot;));
  // Make sure the application doesn't load yet, it'll throw errors.
  process.exit();
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.cli.init">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  cli.init(argv, fn)
                </h3>
                <h5>Description:</h5>
                <p>Create a new app</p>

<p>Example:</p>

<p>tower new app</p>

<p>This is just a special case of executing a recipe.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Array} The command-line arguments list.<br/>
                
                  param {Function} The function executed on app creation.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.init = function(argv, fn){
  argv.splice(2, 1, 'create', 'app');
  require('tower-cookbook')
    .exec('app', 'create', argv, fn);
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.cli.server">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  cli.server(argv)
                </h3>
                <h5>Description:</h5>
                <p>XXX: Check if the user is running <code>tower server</code> vs <code>node app.js</code>. We need to load the <code>app.js</code> file<br />tower server</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Array} The command-line arguments list.<br/>
                
                  return {Server} An express server instance.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.server = function(argv){
  var program = command()
    .usage('server [options]')
    .option('-e, --environment [value]', 'sets Tower.env (development, production, test, etc.)', 'development')
    .option('-p, --port &lt;n&gt;', 'port for the application')
    .option('--static', 'disable-watch')
    .option('--single', 'Single page app')
    .option('-v, --version')
    .on('--help', function(){
      console.log([
          '    Examples:'
        , '      tower generate scaffold Post title:string body:text belongsTo:user'
        , '      tower generate model Post title:string body:text belongsTo:user'
      ].join(&quot;\n&quot;));
    }).parse(argv);

  return require('tower-server')(program);
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.cli.use">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  cli.use(argv)
                </h3>
                <h5>Description:</h5>
                <p>Switch between environment config contexts.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Array} The command-line arguments list.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.use = function(argv){

};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.cli.console">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  cli.console(argv)
                </h3>
                <h5>Description:</h5>
                <p>Enter interactive console.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Array} The command-line arguments list.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.console = function(argv){
  var options = command()
    .usage('console [options]')
    .option('-e, --env [value]', 'sets Tower.env (development, production, test, etc., default: development)', 'development')
    .option('-s, --sync', 'allows for database operations to run synchronously, via node fibers')
    // .option('-r, --remote')

  require('tower-console')({
    env: options.env,
    sync: !!options.sync
  });
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.cli.search">
                
                
                

                
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  cli.search()
                </h3>
                <h5>Description:</h5>
                <p>Search for components people might have created.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  see {undefined} undefined<br/>
                
                   {undefined} undefined<br/>
                
                  TODO: {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.search = function(){

};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.cli.publish">
                
                
                
                              
                <h3>
                  cli.publish()
                </h3>
                <h5>Description:</h5>
                <p>Notify towerjs.org of your component so other people can find it.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.publish = function(){

};

exports.watch = function(){
  require('tower-fs').watch(process.cwd());
};</pre>
              </section>
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.cli.recipe">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  cli.recipe(verb)
                </h3>
                <h5>Description:</h5>
                <p>Return a function for executing a recipe's action.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} String representing an action.<br/>
                
                  return {Function} Function for executing a recipe's action.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function recipe(verb) {
  return function(argv, fn) {
    pipeable(function(err, data){
      // [ 'node', '/usr/local/share/npm/bin/tower', 'create', 'recipe', 'my-recipe', '-o', 'tmp' ]
      // XXX: so you can do `tower &lt;verb&gt; .` and have it &lt;verb&gt; the recipe you are currently in.
      // `data` is a JSON string (if from tower) or another string piped from another command.
      if (data) argv.push('--data', data);
      require('tower-cookbook')
        .exec(argv[3], verb, argv, function(){
          process.exit();
        });
    });
  }
}</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.cli.command">
                
                
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  cli.command()
                </h3>
                <h5>Description:</h5>
                <p>Constructs commander object.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  return {Commander} A commander object.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function command() {
  return require('commander').version(exports.version());
}</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.cli.version">
                
                
                

                
                                              
                
                              
                <h3>
                  cli.version()
                </h3>
                <h5>Description:</h5>
                <p>Show the current Tower version number</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  return {String} String representing the current Tower version number.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function version() {
  return '0.5.0';
}</pre>
              </section>
              
            
              
              
              
              
               
              
              <section class="method last-section" id="method.cli.unknownCommand">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  cli.unknownCommand(name)
                </h3>
                <h5>Description:</h5>
                <p>Handles unknown CLI commands</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} The unknown command's name.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function unknownCommand(name) {
  // Throw a new error:
  console.error('Command [' + process.argv[2] + '] was not found.');
  process.exit();
}

// Don't run during tests.
if (process.argv[1].match(/tower$/)) exports.run(process.argv);

function complete(){
  //process.stdin.resume();
}

// $ tower list ec2:images -i ami-7539b41c | tower create ec2:instance
function pipeable(fn) {
  var data = '';

  process.stdin.setEncoding('utf8');
  process.stdin
    .on('readable', readable)
    .on('end', function(){
      withPipe(data);
    });

  function readable(){
    var chunk = process.stdin.read();
    if (null === chunk) {
      withoutPipe();
    } else {
      data += chunk;
    }
  }

  // this passes file data
  // $ ./b.js &lt; ./a.js
  // this pipes a to b
  // $ ./a.js | ./b.js
  // this doesn't work (replaces b with a)
  // $ ./a.js &gt; ./b.js
  function withPipe(data) {
    fn(null, data);
  }

  function withoutPipe() {
    fn(null);
  }
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="directive-module" class="module">
          <h2>directive</h2>
        
          <div class="module-content">
          

          <h3>Properties:</h3>
          
            

            

            
              
                
            
              
                
            
              
              
                
                
            
              
              
                
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
                      

            
              
              
            
              
              
            
              
              
            
              

              
            
              <section class="property" id="property.directive.collection">              
                <h3>directive.collection</h3>
                <p>Expose <code>collection</code>.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.collection = [];</pre>
              </section>
              
            
              
              
            
              

              
                
              
            
              <section class="property last-section" id="property.directive.Directive">              
                <h3>directive.Directive</h3>
                <p>Expose <code>Directive</code>.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.Directive = Directive;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            

            

            
              
                
            
              
              
                
                
            
              
                
            
              
                
            
              
                
                      

            
              
              
            
              
              
            
              

              
                
              
            
              <section class="property last-section" id="property.directive.exports">              
                <h3>directive.exports</h3>
                <p>Expose <code>directives</code>.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">module.exports = directives;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
          
            

            

                      

            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.directive.directive">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  directive.directive(name, fn)
                </h3>
                <h5>Description:</h5>
                <p>Get/set directive function.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} The directive's name.<br/>
                
                  param {Function} Function called on directive definition.<br/>
                
                  return {Directive} A `Directive` object.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function directive(name, fn) {
  if (undefined === fn &amp;&amp; exports.collection[name])
    return exports.collection[name];

  var instance = new Directive(name, fn);
  exports.collection[name] = instance;
  exports.collection.push(instance);
  exports.emit('define', instance);
  return instance;
}</pre>
              </section>
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.directive.defined">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  directive.defined(name)
                </h3>
                <h5>Description:</h5>
                <p>Check if a directive is defined.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} A directive name.<br/>
                
                  return {Boolean} true if the `Directive` has been defined, but false otherwise<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.defined = function(name){
  return exports.collection.hasOwnProperty(name);
};

exports.has = exports.defined;</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.directive.toString">
                
                
                

                
                                              
                
                              
                <h3>
                  directive.toString()
                </h3>
                <h5>Description:</h5>
                <p>Standard <code>toString</code>.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  return {String} A specifically formatted String.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.toString = function(){
  return 'directive';
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.directive.clear">
                
                
                

                
                                              
                
                              
                <h3>
                  directive.clear()
                </h3>
                <h5>Description:</h5>
                <p>Clear all directives.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  return {this} self.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.clear = function(){
  exports.off();
  // recursively emit `&quot;remove&quot;`.
  content.clear();
  exports.collection = [];
  directives(exports);
  return exports;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.directive.Directive">
                
                
                

                
                                              
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  directive.Directive(name, The)
                </h3>
                <h5>Description:</h5>
                <p>Class representing the extensions to HTML.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  class {undefined} undefined<br/>
                
                   {undefined} undefined<br/>
                
                  param {String} The directive's name.<br/>
                
                  param {Function} directive function to be executed.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function Directive(name, fn) {
  this.name = name;
  this._priority = 0;
  if (fn) this._exec = fn;
}</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.directive.exec">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  directive.exec(element, scope)
                </h3>
                <h5>Description:</h5>
                <p>Apply the directive.</p>

<p>This one (compared to <code>compile</code>)<br />is useful for testing. It is slightly less optimized.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {DOMNode} The DOM element to apply the internal exec function to.<br/>
                
                  param {Content} The content to apply the internal exec function to.<br/>
                
                  return {Object} A scope.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Directive.prototype.exec = function(element, scope){
  // way to quickly access scope on element later.
  // XXX: pretty sure if the element gets removed,
  //      this won't create a memory leak.
  element.__scope__ = scope;
  var attr = this._compileAttr(element);
  if (!content.is(scope)) scope = content('anonymous').init(scope);

  // return a scope.
  return this._exec(scope, element, attr) || scope;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.directive.compile">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  directive.compile(element)
                </h3>
                <h5>Description:</h5>
                <p>Return optimized function for use in templates.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {DOMNode} Element used for template.<br/>
                
                  return {Object} A scope.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Directive.prototype.compile = function(element){
  var self = this;
  var attr = this._compileAttr(element);

  return function exec(element, scope) {
    element.__scope__ = scope;
    return self._exec(scope, element, attr) || scope;
  }
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.directive.types">
                
                
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  directive.types()
                </h3>
                <h5>Description:</h5>
                <p>XXX: The only types of elements this can be defined on.</p>

<p>Comment/Script/Element/Text</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  return {Directive} self.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Directive.prototype.types = function(){
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.directive._compileAttr">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  directive._compileAttr(element)
                </h3>
                <h5>Description:</h5>
                <p>Compile attribute from element.</p>

<p>XXX: Maybe this becomes a separate module/object,<br />     or uses <code>tower-attr</code>.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Content} The element to extract attributes from.<br/>
                
                  return {Object} Extracted directive and element data.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Directive.prototype._compileAttr = function(element){
  var val = element.getAttribute(this.name);
  return {
    name: this.name,
    value: val, // raw value
    expression: val ? expression(val) : noop
  };
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.directive.priority">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  directive.priority(val)
                </h3>
                <h5>Description:</h5>
                <p>Sorting priority.</p>

<p>Higher means it gets moved toward the front.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Integer} Defaults to 0.<br/>
                
                  return {Directive} self.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Directive.prototype.priority = function(val){
  this._priority = val;
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.directive.toString">
                
                
                

                
                                              
                
                              
                <h3>
                  directive.toString()
                </h3>
                <h5>Description:</h5>
                <p>Standard <code>toString</code>.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  return {String} A specifically formatted String.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Directive.prototype.toString = function(){
  return 'directive(&quot;' + this.name + '&quot;)';
};</pre>
              </section>
              
            
              
              
            
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              
              
               
              
              <section class="method last-section" id="method.directive.directives">
                
                
                
                              
                <h3>
                  directive.directives()
                </h3>
                <h5>Description:</h5>
                <p>Define base directives.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function directives(directive) {

  // simple helpers for defining extra directives.

  directive.event = eventDirective;
  directive.attr = attrDirective;
  
  // creates a new scope

  directive('data-scope', function(scope, element, attr){
    return content(attr.value).init({ parent: scope });
  });

  directive('data-text', function(scope, element, attr){
    var val = scope.get(attr.value);
    if (undefined !== val)
      element.textContent = val;
  });

  // attr directives

  for (var i = 0, n = attrs.length; i &lt; n; i++) {
    attrDirective(attrs[i]);
  }

  // event directives

  for (var i = 0, n = events.length; i &lt; n; i++) {
    eventDirective(events[i]);
  }

  function attrDirective(name) {
    directive('data-' + name, function(scope, element, attr){
      var val = scope.get(attr.value);
      if (undefined !== val)
        element.setAttribute(name, val);
    });
  }

  function eventDirective(name) {
    // XXX: refactor to optimize for specific cases.
    directive('on-' + name, function(scope, element, attr){
      function handle(evt) {
        // so it can be used by expression
        scope.attrs.event = evt;
        if ('change' === name) evt.value = value(element);
        // scope.apply(attr.value, [evt]);
        attr.expression(scope);
        delete scope.attrs.event;
      }

      event.bind(element, name, handle);

      scope.on('remove', function(){
        event.unbind(element, name, handle);
      });
    });
  }
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="query-module" class="module">
          <h2>query</h2>
        
          <div class="module-content">
          

          <h3>Properties:</h3>
          
            

            

            
              
                
            
              
                
            
              
              
                
                
            
              
              
                
                
            
              
                
            
              
              
                
                
            
              
              
                
                
            
              
              
                
                
            
              
              
                
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
                      

            
              
              
            
              
              
            
              
              
            
              

              
            
              <section class="property" id="property.query.Query">              
                <h3>query.Query</h3>
                <p>Expose <code>Query</code>.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.Query = Query;</pre>
              </section>
              
            
              
              
            
              

              
            
              <section class="property" id="property.query.Constraint">              
                <h3>query.Constraint</h3>
                <p>Expose <code>Constraint</code>.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.Constraint = Constraint;</pre>
              </section>
              
            
              
              
            
              
              
            
              

              
            
              <section class="property" id="property.query.collection">              
                <h3>query.collection</h3>
                <p>Named queries.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.collection = {};</pre>
              </section>
              
            
              
              
            
              

              
            
              <section class="property" id="property.query.adapters">              
                <h3>query.adapters</h3>
                <p>Queryable adapters.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.adapters = [];</pre>
              </section>
              
            
              
              
            
              

              
            
              <section class="property" id="property.query.filter">              
                <h3>query.filter</h3>
                <p>Expose <code>filter</code>.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.filter = filter;</pre>
              </section>
              
            
              
              
            
              

              
                
              
            
              <section class="property last-section" id="property.query.validate">              
                <h3>query.validate</h3>
                <p>Validate query constraints.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.validate = validateConstraints;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            

            

            
              
              
                
                
            
              
                
                      

            
              
              
            
              

              
                
              
            
              <section class="property last-section" id="property.query.exports">              
                <h3>query.exports</h3>
                <p>Expose <code>Constraint</code>.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">module.exports = Constraint;</pre>
              </section>
              
            
              
              
            
          
            

            

            
              
                
            
              
              
                
                
            
              
                
                      

            
              
              
            
              
              
            
              

              
                
              
            
              <section class="property last-section" id="property.query.exports">              
                <h3>query.exports</h3>
                <p>Expose <code>filter</code>.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">module.exports = filter;</pre>
              </section>
              
            
              
              
            
          
            

            

            
              
                
            
              
              
                
                
            
              
                
                      

            
              
              
            
              
              
            
              

              
                
              
            
              <section class="property last-section" id="property.query.exports">              
                <h3>query.exports</h3>
                <p>Expose <code>query-subscriber</code> program.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">module.exports = subscriber();</pre>
              </section>
              
            
              
              
            
          
            

            

            
              
                
            
              
              
                
                
            
              
                
                      

            
              
              
            
              
              
            
              

              
                
              
            
              <section class="property last-section" id="property.query.exports">              
                <h3>query.exports</h3>
                <p>Expose <code>validate</code>.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">module.exports = validate;</pre>
              </section>
              
            
              
              
            
          
            

            

            
              
              
                
                
            
              
                
                      

            
              
              
            
              

              
                
              
            
              <section class="property last-section" id="property.query.exports">              
                <h3>query.exports</h3>
                <p>Expose <code>validate</code>.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">module.exports = validate;</pre>
              </section>
              
            
              
              
            
          
            

            

                      

            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.query.query">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  query.query(A)
                </h3>
                <h5>Description:</h5>
                <p>Wrap an array for chaining query criteria.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} query name.<br/>
                
                  return {Query} A query.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function query(name) {
  return null == name
    ? new Query
    : exports.collection[name]
      ? exports.collection[name].clone()
      : (exports.collection[name] = new Query(name));
}</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.query.use">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  query.use(An)
                </h3>
                <h5>Description:</h5>
                <p>Make an adapter queryable.</p>

<p>XXX: The main reason for doing it this way<br />     is to not create circular dependencies.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {Adapter} adapter object.<br/>
                
                  return {Function} self.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.use = function(adapter){
  exports.adapters[adapter.name] = adapter;
  exports.adapters.push(adapter);
  return exports;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.Query">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                
                              
                <h3>
                  query.Query(name)
                </h3>
                <h5>Description:</h5>
                <p>Class representing a query.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  class {undefined} undefined<br/>
                
                  param {String} A query instance's name.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function Query(name) {
  this.name = name;
  this.constraints = [];
  this.selects = [];
  this.sorting = [];
  this.paging = {};
  // XXX: accomplish both joins and graph traversals.
  this.relations = [];
  // this.starts = []
  // this.groupings = {}
}</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.use">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  query.use(name)
                </h3>
                <h5>Description:</h5>
                <p>Explicitly tell the query what adapters to use.</p>

<p>If not specified, it will do its best to find<br />the adapter. If one or more are specified, the<br />first specified will be the default, and its namespace<br />can be left out of the resources used in the query<br />(e.g. <code>user</code> vs. <code>facebook.user</code> if <code>query().use('facebook').select('user')</code>).</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {Mixed} Name of the adapter, or the adapter object itself.<br/>
                
                   {undefined} undefined<br/>
                
                  return {this} self.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.use = function(name){
  (this.adapters || (this.adapters = []))
    .push('string' === typeof name ? exports.adapters[name] : name);
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.start">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  query.start(key, val)
                </h3>
                <h5>Description:</h5>
                <p>The starting table or record for the query.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {String} The starting table or record name.<br/>
                
                  param {Object} <br/>
                
                  return {this} self.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.start = function(key, val){
  this._start = key;
  (this.starts || (this.starts = [])).push(queryModel(key));
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.returns">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  query.returns(key)
                </h3>
                <h5>Description:</h5>
                <p>Add a query pattern to be returned.<br />XXX: <a href='http://docs.neo4j.org/chunked/stable/query-return.html'>http://docs.neo4j.org/chunked/stable/query-return.html</a></p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} A query pattern that you want to be returned.<br/>
                
                  return {this} self.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.returns = function(key){
  this.selects.push(queryAttr(key, this._start));
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.select">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  query.select(key)
                </h3>
                <h5>Description:</h5>
                <p>Start a SELECT query.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {String} A record or table name.<br/>
                
                  returns {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.select = function(key){
  this._start = this._start || key;
  this.selects.push(queryAttr(key, this._start));
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.where">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  query.where(key)
                </h3>
                <h5>Description:</h5>
                <p>Add a WHERE clause.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} A record or table property/column name.<br/>
                
                  returns {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.where = function(key){
  this.context = key;
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.incoming">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  query.incoming(key)
                </h3>
                <h5>Description:</h5>
                <p>In a graph database, the data pointing <em>to</em> this node.<br />In a relational/document database, the records with<br />a foreign key pointing to this record or set of records.</p>

<p>Example:</p>

<p>query().start('users')<br />     .incoming('friends')<br />     .incoming('friends');</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {String} Name of the data coming to the start node.<br/>
                
                  return {this} self.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.incoming = function(key){
  return this.relation('incoming', key);
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.outgoing">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  query.outgoing(key)
                </h3>
                <h5>Description:</h5>
                <p>In a graph database, the data pointing <em>from</em> this node.<br />In a relational/document database, the record this<br />record points to via its foreign key.</p>

<p>Example:</p>

<p>query().start('users')<br />     .outgoing('friends')<br />     .outgoing('friends');</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {String} Name of the data going out from the start node.<br/>
                
                  return {this} self.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.outgoing = function(key){
  return this.relation('outgoing', key);
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.as">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  query.as(key)
                </h3>
                <h5>Description:</h5>
                <p>What the variable should be called for the data returned.<br />References the previous item in the query.</p>

<p>Example:</p>

<p>query().start('users').as('people');</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} The data's new variable name.<br/>
                
                  return {this} self.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.as = function(key){
  // XXX: todo
  this.selects[this.selects.length - 1].alias = key;
  return this;
};</pre>
              </section>
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.query.contains">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  query.contains(val)
                </h3>
                <h5>Description:</h5>
                <p>Check if the value exists within a set of values.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {Object} The constraint value.<br/>
                
                  returns {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.contains = function(val){
  return this.constraint(this.context, 'in', val);
};</pre>
              </section>
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.query.create">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  query.create(data, fn)
                </h3>
                <h5>Description:</h5>
                <p>Create one or more records.</p>

<p>This is different from the other actions <br />in that it can take data (records) as arguments.</p>

<p>Example:</p>

<p>query()<br />     .use('memory')<br />     .select('post')<br />     .create({ title: 'Foo' }, function(err, post){</p>

<pre><code> });
</code></pre>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Object} Data record.<br/>
                
                  param {Function} Function to be executed on record creation.<br/>
                
                  return {Mixed} Whatever `fn` returns on the `create` action.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.create = function(data, fn){
  return this.action('create', data).exec(fn);
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.update">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  query.update(data, Function)
                </h3>
                <h5>Description:</h5>
                <p>Update one or more records.</p>

<p>This is different from the other actions<br />in that it can take data (records) as arguments.</p>

<p>Example:</p>

<p>query()<br />     .use('memory')<br />     .select('post')<br />     .update({ title: 'Foo' }, function(err, post){</p>

<pre><code> });
</code></pre>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Object} Data record.<br/>
                
                  param {Function} to be executed on record update.<br/>
                
                  return {Mixed} Whatever `fn` returns on the `update` action.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.update = function(data, fn){
  return this.action('update', data).exec(fn);
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.first">
                
                
                

                
                  
                   
                 
               
                                              
                
                              
                <h3>
                  query.first(fn)
                </h3>
                <h5>Description:</h5>
                <p>Return the first record that matches the query pattern.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Function} Function to execute on records after `find` action finishes.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.first = function(fn){
  this.limit(1).action('find').exec(function(err, records){
    if (err) return fn(err);
    fn(err, records[0]);
  });
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.last">
                
                
                

                
                  
                   
                 
               
                                              
                
                              
                <h3>
                  query.last(fn)
                </h3>
                <h5>Description:</h5>
                <p>Return the last record that matches the query pattern.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Function} Function to execute on records after `find` action finishes.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.last = function(fn){
  this.limit(1).action('find').exec(function(err, records){
    if (err) return fn(err);
    fn(err, records[0]);
  });
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.limit">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  query.limit(val)
                </h3>
                <h5>Description:</h5>
                <p>Add a record query LIMIT.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {Integer} The record limit.<br/>
                
                  return {this} self.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.limit = function(val){
  this.paging.limit = val;
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.page">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  query.page(val)
                </h3>
                <h5>Description:</h5>
                <p>Specify the page number.</p>

<p>Use in combination with <code>limit</code> for calculating <code>offset</code>.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {Integer} The page number.<br/>
                
                  return {this} self.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.page = function(val){
  this.paging.page = val;
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.offset">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  query.offset(val)
                </h3>
                <h5>Description:</h5>
                <p>Specify the offset.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {Integer} The offset value.<br/>
                
                  return {this} self.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.offset = function(val){
  this.paging.offset = val;
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.asc">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  query.asc(key)
                </h3>
                <h5>Description:</h5>
                <p>Sort ascending by <code>key</code>.</p>

<p>If the key is a property name, it will<br />be combined with the table/collection name<br />defined somewhere earlier in the query.</p>

<p>Example:</p>

<p>query().start('users').asc('createdAt');</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {String} A property name.<br/>
                
                  return {this} self.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.asc = function(key){
  return this.sort(key, 1);
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.desc">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  query.desc(key)
                </h3>
                <h5>Description:</h5>
                <p>Sort descending by <code>key</code>.</p>

<p>If the key is a property name, it will<br />be combined with the table/collection name<br />defined somewhere earlier in the query.</p>

<p>Example:</p>

<p>query().start('users').desc('createdAt');</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {String} A property name.<br/>
                
                  return {this} self.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.desc = function(key){
  return this.sort(key, -1);
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.relation">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  query.relation(dir, key)
                </h3>
                <h5>Description:</h5>
                <p>Pushes a <code>"relation"</code> onto the query.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {String} The direction.<br/>
                
                  param {String} The key.<br/>
                
                  return {this} self.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.relation = function(dir, key){
  var attr = queryAttr(key, this._start);
  attr.direction = dir;
  this.relations.push(attr);
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.constraint">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  query.constraint(key, op, val)
                </h3>
                <h5>Description:</h5>
                <p>Pushes a <code>"constraint"</code> onto the query.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {String} The constraint key.<br/>
                
                  param {String} Operator string<br/>
                
                  param {Object} The constraint value.<br/>
                
                  return {this} self.<br/>
                
                  api {undefined} undefined<br/>
                
                   {undefined} undefined<br/>
                
                  see {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.constraint = function(key, op, val){
  this.constraints.push(new Constraint(key, op, val, this._start));
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.action">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  query.action(type, data)
                </h3>
                <h5>Description:</h5>
                <p>Pushes an <code>"action"</code> onto the query.</p>

<p>Example:</p>

<p>query().action('insert', { message: 'Test' });<br />   query().action('insert', [ { message: 'one.' }, { message: 'two.' } ]);</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {String} The action type.<br/>
                
                  param {Object,Array} The data to act on.<br/>
                
                  return {this} self.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.action = function(type, data){
  this.type = type
  this.data = data ? isArray(data) ? data : [data] : undefined;
  return this;
};

// XXX: only do if it decreases final file size
// each(['find', 'create', 'update', 'delete'])</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.sort">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  query.sort(key, dir)
                </h3>
                <h5>Description:</h5>
                <p>Pushes a sort direction onto the query.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {String} The property to sort on.<br/>
                
                  param {Integer} Direction it should point (-1, 1, 0).<br/>
                
                  return {this} self.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.sort = function(key, dir){
  var attr = queryAttr(key, this._start);
  attr.direction = key;
  this.sorting.push(attr);
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.explain">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  query.explain(fn)
                </h3>
                <h5>Description:</h5>
                <p>A way to log the query criteria,<br />so you can see if the adapter supports it.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {Function} The query criteria logging function<br/>
                
                  return {this} self.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.explain = function(fn){
  this._explain = fn;
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.clone">
                
                
                

                
                                              
                
                              
                <h3>
                  query.clone()
                </h3>
                <h5>Description:</h5>
                <p>Clone the current <code>Query</code> object.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  return {Query} A cloned `Query` object.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.clone = function(){
  return new Query(this.name);
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.exec">
                
                
                

                
                                              
                

                
                                              
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  query.exec(fn)
                </h3>
                <h5>Description:</h5>
                <p>Execute the query.<br />XXX: For now, only one query per adapter.<br />     Later, you can query across multiple adapters</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  see {undefined} undefined<br/>
                
                  see {undefined} undefined<br/>
                
                  see {undefined} undefined<br/>
                
                  param {Function} Function that gets called on adapter execution.<br/>
                
                  return {Mixed} Whatever `fn` returns on execution.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.exec = function(fn){
  this.context = this._start = undefined;
  var adapter = this.adapters &amp;&amp; this.adapters[0] || exports.adapters[0];
  this.validate(function(){});
  if (this.errors &amp;&amp; this.errors.length) return fn(this.errors);
  if (!this.selects[0]) throw new Error('Must `.select(resourceName)`');
  return adapter.exec(this, fn);
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.validate">
                
                
                

                
                  
                   
                 
               
                                              
                
                              
                <h3>
                  query.validate(fn)
                </h3>
                <h5>Description:</h5>
                <p>Validate the query on all adapters.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Function} Function called on query validation.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.validate = function(fn){
  var adapter = this.adapters &amp;&amp; this.adapters[0] || exports.adapters[0];
  validate(this, adapter, fn);
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.subscribe">
                
                
                

                
                  
                   
                 
               
                                              
                
                              
                <h3>
                  query.subscribe(fn)
                </h3>
                <h5>Description:</h5>
                <p>Subscribe to a type of query.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Function} Function executed on each subscriber output.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.subscribe = function(fn){
  var self = this;
  subscriber.output(this.type, function(record){
    if (self.test(record)) fn(record);
  });
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.query.query">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  query.query(name)
                </h3>
                <h5>Description:</h5>
                <p>Define another query on the parent scope.</p>

<p>XXX: wire this up with the resource (for todomvc).</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} A query name.<br/>
                
                  return {Query} A `Query` object.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Query.prototype.query = function(name) {
  return query(name);
};

function queryModel(key) {
  key = key.split('.');

  if (2 === key.length)
    return { adapter: key[0], resource: key[1], ns: key[0] + '.' + key[1] };
  else
    return { resource: key[0], ns: key[0] }; // XXX: adapter: adapter.default()
}</pre>
              </section>
              
            
              
              
              
              
               
              
              <section class="method last-section" id="method.query.queryAttr">
                
                
                
                              
                <h3>
                  query.queryAttr()
                </h3>
                <h5>Description:</h5>
                <p>Variables used in query.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function queryAttr(val, start){
  var variable = {};

  val = val.split('.');

  switch (val.length) {
    case 3:
      variable.adapter = val[0];
      variable.resource = val[1];
      variable.attr = val[2];
      variable.ns = variable.adapter + '.' + variable.resource;
      break;
    case 2:
      variable.adapter = 'memory'; // XXX: adapter.default();
      variable.resource = val[0];
      variable.attr = val[1];
      variable.ns = variable.resource;
      break;
    case 1:
      variable.adapter = 'memory'; // XXX: adapter.default();
      variable.resource = start;
      variable.attr = val[0];
      variable.ns = variable.resource;
      break;
  }

  variable.path = variable.ns + '.' + variable.attr;

  return variable;
}

function queryValue(val) {
  // XXX: eventually handle relations/joins.
  return { value: val, type: typeof(val) };
}</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
              
              
               
              
              <section class="method last-section" id="method.query.Constraint">
                
                
                

                
                                              
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                
                              
                <h3>
                  query.Constraint(a, operator, b, start)
                </h3>
                <h5>Description:</h5>
                <p>Class representing a query constraint.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  class {undefined} undefined<br/>
                
                   {undefined} undefined<br/>
                
                  param {String} The left constraint.<br/>
                
                  param {String} The constraint.<br/>
                
                  param {String} The right constraint.<br/>
                
                  param {Object} The starting object.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function Constraint(a, operator, b, start) {
  this.left = left(a, start);
  this.operator = operator;
  this.right = right(b);
}

function left(val, start) {
  var variable = {};

  val = val.split('.');

  switch (val.length) {
    case 3:
      variable.adapter = val[0];
      variable.resource = val[1];
      variable.attr = val[2];
      variable.ns = variable.adapter + '.' + variable.resource;
      break;
    case 2:
      variable.adapter = 'memory'; // XXX: adapter.default();
      variable.resource = val[0];
      variable.attr = val[1];
      variable.ns = variable.resource;
      break;
    case 1:
      variable.adapter = 'memory'; // XXX: adapter.default();
      variable.resource = start;
      variable.attr = val[0];
      variable.ns = variable.resource;
      break;
  }
  
  variable.path = variable.ns + '.' + variable.attr;

  return variable;
}

function right(val) {
  // XXX: eventually handle relations/joins.
  return { value: val, type: typeof(val) };
}</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
              
              
              
              
               
              
              <section class="method last-section" id="method.query.filter">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  query.filter(array, constraints)
                </h3>
                <h5>Description:</h5>
                <p>Filter records based on a set of constraints.</p>

<p>This is a robust solution, hooking into an<br />extendable validation system. If you just need<br />something simple, use the built-in <code>array.filter</code>.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Array} Array of plain objects (such as records).<br/>
                
                  param {Array} Array of constraints.<br/>
                
                  return {Array} The filtered records.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function filter(array, constraints) {
  if (!constraints.length) return array;

  var result = [];

  // XXX: is there a more optimal algorithm?
  for (var i = 0, n = array.length; i &lt; n; i++) {
    if (validateConstraints(array[i], constraints))
      result.push(array[i]);
  }

  return result;
}</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
              
              
              
              
               
              
              <section class="method last-section" id="method.query.subscriber">
                
                
                

                
                                              
                
                              
                <h3>
                  query.subscriber()
                </h3>
                <h5>Description:</h5>
                <p>Define a query subscribing program.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  return {Program} A query subscriber program.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function subscriber() {
  program('query-subscriber')
    .input('create')
    .input('update')
    .input('remove');

  return program('query-subscriber').init();
}</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
              
              
              
              
               
              
              <section class="method last-section" id="method.query.validate">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  query.validate(obj, constraints)
                </h3>
                <h5>Description:</h5>
                <p>Validate an object against an array of constraints.</p>

<p>To define validations, use the <code>tower-validator</code> module.<br />XXX: that isn't implemented yet, they're in here.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Object} Record or other simple JavaScript object.<br/>
                
                  param {Array} Array of constraints.<br/>
                
                  return {Boolean} true if obj passes all constraints, otherwise false.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function validate(obj, constraints) {
  for (var i = 0, n = constraints.length; i &lt; n; i++) {
    // XXX: obj vs. obj.get
    var constraint = constraints[i]
      , left = obj.get ? obj.get(constraint.left.attr) : obj[constraint.left.attr]
      , right = constraint.right.value;

    if (!validator(constraint.operator)(left, right))
      return false;
  }

  return true;
}</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
              
              
               
              
              <section class="method last-section" id="method.query.validate">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                
                              
                <h3>
                  query.validate(query, adapter, fn)
                </h3>
                <h5>Description:</h5>
                <p>Add validations to perform before this is executed.</p>

<p>XXX: not implemented.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Query} A query object.<br/>
                
                  param {Adapter} An adapter object.<br/>
                
                  param {Function} Function executed at the end of validation.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function validate(query, adapter, fn) {
  // XXX: only supports one action at a time atm.
  var constraints = query.constraints;
  var type = query.type;
  query.errors = [];
  // XXX: collect validators for resource and for each attribute.
  // var resourceValidators = resource(criteria[0][1].ns).validators;
  for (var i = 0, n = constraints.length; i &lt; n; i++) {
    var constraint = constraints[i];

    if (!adapter.action.exists(constraint.left.resource + '.' + type))
      continue;

    var stream = adapter.action(constraint.left.resource + '.' + type);
    var param = stream.params &amp;&amp; stream.params[constraint.left.attr];
    if (param &amp;&amp; param.validate(query, constraint)) {
      // $ tower list ec2:group --name 'hello-again-again,hello-again'
      constraint.right.value = param.typecast(constraint.right.value);
    }
  }

  query.errors.length ? fn(query.errors) : fn();
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="template-module" class="module">
          <h2>template</h2>
        
          <div class="module-content">
          

          <h3>Properties:</h3>
          
            

            

            
              
                
            
              
                
            
              
                
            
              
              
                
                
            
              
              
                
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
                      

            
              
              
            
              
              
            
              
              
            
              
              
            
              

              
            
              <section class="property" id="property.template.collection">              
                <h3>template.collection</h3>
                <p>Expose <code>collection</code>.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.collection = {};</pre>
              </section>
              
            
              
              
            
              

              
                
              
            
              <section class="property last-section" id="property.template.compile">              
                <h3>template.compile</h3>
                <p>Expose <code>compile</code>.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.compile = compile;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            

            

                      

            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.template.template">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  template.template(name, node)
                </h3>
                <h5>Description:</h5>
                <p>Compile a DOM element's directives to a function.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} The template's name.<br/>
                
                  param {HTMLNode} The HTML node.<br/>
                
                  return {Function} The compiled template function.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function template(name, node) {
  // if `name` is a DOM node, arguments are shifted by 1
  if ('string' !== typeof name) return compile(name);
  // only 1 argument
  if (undefined === node) return exports.collection[name];
  // compile it
  return exports.collection[name] = compile(node);
}</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.template.compile">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  template.compile(node, scope)
                </h3>
                <h5>Description:</h5>
                <p>Traverse <code>node</code> and children recursively,<br />and collect and execute directives.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {HTMLNode} <br/>
                
                  param {Content} <br/>
                
                  return {Function} The compiled template function.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function compile(node) {
  var fn = node.length
    ? compileEach(node)
    : compileNode(node);

  // clone original element
  fn.clone = function clone(scope){
    return fn(scope, node.cloneNode(true));
  }

  return fn;
}

function compileNode(node) {
  var directivesFn = compileDirectives(node);
  
  // recursive
  var eachFn = node.childNodes
    ? compileEach(node.childNodes)
    : undefined;

  // `returnNode` is used for recursively 
  // passing children. this is used for cloning, 
  // where it should apply the directives to 
  // the new children, not the original 
  // template's children.

  function nodeFn(scope, returnNode) {
    returnNode || (returnNode = node);

    // apply directives to node.
    if (directivesFn) scope = directivesFn(scope, returnNode);

    // recurse, apply directives to children.
    if (eachFn &amp;&amp; returnNode.childNodes)
      eachFn(scope, returnNode.childNodes);

    return returnNode;
  }

  return nodeFn;
}

function compileEach(children) {
  var fns = [];
  for (var i = 0, n = children.length; i &lt; n; i++) {
    fns.push(compileNode(children[i]));
  }

  return createEachFn(fns);
}

function compileDirectives(node) {
  var directives = getDirectives(node);

  if (!directives.length) return; // don't execute function if unnecessary.

  var fns = [];
  for (var i = 0, n = directives.length; i &lt; n; i++) {
    fns.push(directives[i].compile(node));
  }

  return createDirectivesFn(fns);
}

function getDirectives(node) {
  var directives = [];

  // https://developer.mozilla.org/en-US/docs/Web/API/Node.nodeType
  switch (node.nodeType) {
    case 1: // element node (visible tags plus &lt;style&gt;, &lt;meta&gt;)
      // first, appendDirective directive named after node, if it exists.
      appendDirective(node.nodeName.toLowerCase(), directives);
      getDirectivesFromAttributes(node, directives);
      break;
    case 3: // text node
      // node.nodeValue
      appendDirective('interpolation', directives);
      break;
    case 8: // comment node
      //
      break;
  }

  if (directives.length) directives.sort(priority);
  return directives;
}

function getDirectivesFromAttributes(node, directives) {
  var attr;
  for (var i = 0, n = node.attributes.length; i &lt; n; i++) {
    attr = node.attributes[i];
    // The specified property returns true if the 
    // attribute value is set in the document, 
    // and false if it's a default value in a DTD/Schema.
    // http://www.w3schools.com/dom/prop_attr_specified.asp
    // XXX: don't know what this does.
    if (!attr.specified) continue;
    appendDirective(attr.name, directives);
  }
}</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.template.appendDirective">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                
                              
                <h3>
                  template.appendDirective(name, directives)
                </h3>
                <h5>Description:</h5>
                <p>Add directive.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} The directive's name.<br/>
                
                  param {String} The list of directives.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function appendDirective(name, directives) {
  if (directive.defined(name)) {
    directives.push(directive(name));
  }
}</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.template.createEachFn">
                
                
                
                              
                <h3>
                  template.createEachFn()
                </h3>
                <h5>Description:</h5>
                <p>Creates a template function for node children<br />in an isolated JS scope.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function createEachFn(fns) {
  var n = fns.length, i;

  function eachFn(scope, children) {
    for (i = 0; i &lt; n; i++) {
      // XXX: not sure this is correct.
      fns[i](scope, children[i]);
    }
  }

  return eachFn;
}</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.template.createDirectivesFn">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  template.createDirectivesFn(fns)
                </h3>
                <h5>Description:</h5>
                <p>Creates a template function for node directives<br />in an isolated JS scope.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Array} Array of directive functions.<br/>
                
                  return {Function} A template function for node directives.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function createDirectivesFn(fns) {
  var n = fns.length, i;

  function directivesFn(scope, node) {
    // XXX: maybe we can collect the directives in reverse
    //      and then use a `while` loop.
    for (i = 0; i &lt; n; i++) {
      scope = fns[i](node, scope);
    }

    return scope;
  }

  return directivesFn;
}</pre>
              </section>
              
            
              
              
              
              
               
              
              <section class="method last-section" id="method.template.priority">
                
                
                
                              
                <h3>
                  template.priority()
                </h3>
                <h5>Description:</h5>
                <p>Sort by priority.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function priority(a, b) {
  return b._priority - a._priority;
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="validator-module" class="module">
          <h2>validator</h2>
        
          <div class="module-content">
          

          <h3>Properties:</h3>
          
            

            

            
              
                
            
              
                
            
              
              
                
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
                      

            
              
              
            
              
              
            
              
              
            
              

              
                
              
            
              <section class="property last-section" id="property.validator.collection">              
                <h3>validator.collection</h3>
                <p>All validators in the order they were defined.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.collection = [];</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            

            

            
              
                
            
              
              
                
                
            
              
                
                      

            
              
              
            
              
              
            
              

              
                
              
            
              <section class="property last-section" id="property.validator.exports">              
                <h3>validator.exports</h3>
                <p>Expose <code>validators</code>.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">module.exports = validators;</pre>
              </section>
              
            
              
              
            
          
            

            

                      

            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.validator.validator">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                              
                 
               
                                              
                
                              
                <h3>
                  validator.validator(name, fn)
                </h3>
                <h5>Description:</h5>
                <p>Get or set a validator function.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} <br/>
                
                  param {Function} <br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function validator(name, fn) {
  if (undefined === fn) return exports.collection[name];

  exports.collection[name] = fn;
  exports.collection.push(fn);
  exports.emit('define', name, fn);
  
  return fn;
}</pre>
              </section>
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.validator.has">
                
                
                

                
                  
                   
                 
               
                                              
                
                              
                <h3>
                  validator.has(name)
                </h3>
                <h5>Description:</h5>
                <p>Check if validator exists.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} <br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.has = function(name){
  return !!exports.collection[name];
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.validator.ns">
                
                
                
                              
                <h3>
                  validator.ns()
                </h3>
                <h5>Description:</h5>
                <p>Scope validators to a namespace.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.ns = function(ns){
  return function validator(name, fn) {
    return exports(ns + '.' + name, fn);
  }
};</pre>
              </section>
              
            
              
              
              
              
               
              
              <section class="method last-section" id="method.validator.clear">
                
                
                
                              
                <h3>
                  validator.clear()
                </h3>
                <h5>Description:</h5>
                <p>Remove all validators.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.clear = function(){
  var collection = exports.collection;

  exports.off('define');
  for (var key in collection) {
    if (collection.hasOwnProperty(key)) {
      delete collection[key];
    }
  }
  collection.length = 0;
  return exports;
};

validators(exports);</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
              
              
              
              
               
              
              <section class="method last-section" id="method.validator.validators">
                
                
                
                              
                <h3>
                  validator.validators()
                </h3>
                <h5>Description:</h5>
                <p>Define basic operators/validators.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function validators(validator) {
  validator('eq', function eq(a, b){
    return a === b;
  });

  validator('neq', function neq(a, b){
    return a !== b;
  });

  validator('contains', function contains(a, b){
    return !!~indexof(b, a);
  });

  validator('in', validator('contains'));

  validator('excludes', function nin(a, b){
    return !~indexof(b, a);
  });

  validator('nin', validator('excludes'));

  validator('gte', function gte(a, b){
    return a &gt;= b;
  });

  validator('gt', function gt(a, b){
    return a &gt; b;
  });

  validator('lte', function gte(a, b){
    return a &lt;= b;
  });

  validator('lt', function gt(a, b){
    return a &lt; b;
  });

  validator('match', function match(a, b){
    return !!a.match(b);
  });
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="content-module" class="module">
          <h2>content</h2>
        
          <div class="module-content">
          

          <h3>Properties:</h3>
          
            

            

            
              
                
            
              
                
            
              
                
            
              
              
                
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
                      

            
              
              
            
              
              
            
              
              
            
              
              
            
              

              
                
              
            
              <section class="property last-section" id="property.content.collection">              
                <h3>content.collection</h3>
                <p>Expose <code>collection</code>.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.collection = [];</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            

            

            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
                      

            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            

            

                      

            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.content.content">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  content.content(name, fn)
                </h3>
                <h5>Description:</h5>
                <p>Public API. Gets an existing content or creates a new one.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} The content's name.<br/>
                
                  param {Function} Function called on content initialization.<br/>
                
                  return {Content} A `Content` object.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function content(name, fn) {
  if (exports.collection[name]) return exports.collection[name];</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.content.Content">
                
                
                

                
                                              
                

                
                                              
                

                
                  
                   
                 
               
                                              
                
                              
                <h3>
                  content.Content(data)
                </h3>
                <h5>Description:</h5>
                <p>Class representing a specific data segment in the DOM.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  class {undefined} undefined<br/>
                
                   {undefined} undefined<br/>
                
                  param {Object} The content's data.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function Content(data) {
    this.name = name;
    // all actual attributes/values
    this.attrs = {};
    this.children = [];

    if (data) {
      // special prop
      this.parent = data.parent;
      delete data.parent;
      for (var key in data) this.set(key, data[key]);
    }

    // XXX: probably should do `this.set('parent')`
    //      so there is a standard way of managing parents.
    if (!this.parent &amp;&amp; 'root' !== name)
      this.parent = exports.root();
    if (this.parent)
      this.parent.children.push(this);

    // for being able to emit events to instances from class.
    Content.instances.push(this);
    Content.emit('init', this);
  }

  Content.prototype = {};
  Content.prototype.constructor = Content;
  Content.id = name;
  Content.attrs = [];
  Content.actions = {};
  Content.instances = [];

  // statics

  for (var key in statics) Content[key] = statics[key];

  // proto

  for (var key in proto) Content.prototype[key] = proto[key];

  if (fn) Content.on('init', fn);

  exports.collection.push(Content);
  exports.collection[name] = Content;
  exports.emit('define', Content);
  return Content;
}</pre>
              </section>
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.content.clear">
                
                
                

                
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  content.clear()
                </h3>
                <h5>Description:</h5>
                <p>Clear the collections.<br />Used for testing.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                   {undefined} undefined<br/>
                
                  return {this} self.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.clear = function(){
  exports.off();
  exports.root().remove();
  exports.collection = [];
  root = undefined;
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.content.defined">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  content.defined(name)
                </h3>
                <h5>Description:</h5>
                <p>Check if a content has been defined.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} The content's name.<br/>
                
                  return {Boolean} true if the `Content` has been defined, but false otherwise.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.defined = function(name){
  return exports.collection.hasOwnProperty(name);
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.content.is">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  content.is(obj)
                </h3>
                <h5>Description:</h5>
                <p>Check if <code>obj</code> is a <code>Content</code> object</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Content} A content object.<br/>
                
                  return {Boolean} true if `obj` is a Content object, but false otherwise.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.is = function(obj){
  return obj &amp;&amp; '[object Content]' === obj.toString();
};</pre>
              </section>
              
            
              
              
              
              
               
              
              <section class="method last-section" id="method.content.root">
                
                
                

                
                                              
                
                              
                <h3>
                  content.root()
                </h3>
                <h5>Description:</h5>
                <p>Get the initiated root content.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  return {Content} The root content.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.root = function(){
  if (root) return root;
  return root = content('root').init();
};</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.content.get">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  content.get(A)
                </h3>
                <h5>Description:</h5>
                <p>Get attr.</p>

<p>Attributes can be functions.<br />However, an <code>action</code> can not be called through <code>get</code>.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} path delimited by periods `.`.<br/>
                
                  return {Mixed} An attribute.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.get = function(path){
  path = path.split('.');
  var val = findAttr(this, path.shift());

  // XXX: refactor to more generic/better system.
  while (path.length &amp;&amp; undefined !== val) {
    var name = path.shift();
    if (val.hasOwnProperty(name)) {
      val = val[name];
    // XXX: unoptimized, but should work for the moment.
    } else if ('function' === typeof val.get) {
      val = val.get([name].concat(path).join('.'));
      path = [];
    } else {
      val = undefined;
    }
  }

  return val;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.content.set">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  content.set(name, val)
                </h3>
                <h5>Description:</h5>
                <p>Set attr.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} The attribute's name.<br/>
                
                  param {Mixed} The attribute's value.<br/>
                
                  return {Object} The attribute's value.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.set = function(name, val){
  // XXX: set for `nested.path`.
  // XXX: make better comparator.
  if (this.attrs[name] !== val) {
    var prev = this.attrs[name];
    this.attrs[name] = val;
    // XXX: maybe it looks for `dependencies` on
    //      `this.constructor.attrs[name].dependencies`,
    //      to see if it should emit change events for computed props.
    this.changed(name, val, prev);
  }

  return val;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.content.changed">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                
                              
                <h3>
                  content.changed(name, val, prev)
                </h3>
                <h5>Description:</h5>
                <p>Trigger the <code>change</code> event on an attribute.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} The attribute's name.<br/>
                
                  param {Mixed} The attribute's value.<br/>
                
                  param {Object} The attribute's previous value.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.changed = function(name, val, prev){
  this.emit('change ' + name, val, prev);
  this.emit('change', name, val, prev);
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.content.watch">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                
                              
                <h3>
                  content.watch(attr, fn)
                </h3>
                <h5>Description:</h5>
                <p>Simple wrapper around <code>.on('change &lt;attr&gt;')</code>.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} The attribute's name.<br/>
                
                  param {Function} The callback to trigger when on an attribute's change event.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.watch = function(attr, fn){
  return this.on('change ' + attr, fn);
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.content.apply">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  content.apply(name, args)
                </h3>
                <h5>Description:</h5>
                <p>Apply an action.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} The action's name.<br/>
                
                  param {Array} The action's list of parameters.<br/>
                
                  return {Function} The named action.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.apply = function(name, args){
  return findAction(this, name).apply(this, args);
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.content.call">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  content.call(name)
                </h3>
                <h5>Description:</h5>
                <p>Call an action.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} The action's name.<br/>
                
                  return {Function} The named action.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.call = function(name){
  return findAction(this, name).apply(this, slice.call(arguments, 1));
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.content.remove">
                
                
                

                
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  content.remove()
                </h3>
                <h5>Description:</h5>
                <p>Emit <code>'remove'</code> event for directives<br />to teardown custom functionality for their element.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                   {undefined} undefined<br/>
                
                  return {this} self.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.remove = function(){
  for (var i = 0, n = this.children.length; i &lt; n; i++) {
    this.children[i].remove();
  }
  this.emit('remove');
  // XXX: not sure this is necessary
  this.constructor.emit('remove', this);

  var i = indexOf(this.constructor.instances, this);
  if (i &gt;= 0)
    this.constructor.instances.splice(i, 1);
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.content.toString">
                
                
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  content.toString()
                </h3>
                <h5>Description:</h5>
                <p>Standard <code>toString</code>.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  see {undefined} undefined<br/>
                
                  return {String} A specifically formatted String.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.toString = function(){
  return '[object Content]';
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.content.findAttr">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  content.findAttr(content, name)
                </h3>
                <h5>Description:</h5>
                <p>Traverse content tree to find attribute.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Content} The starting content.<br/>
                
                  param {String} The attribute's name.<br/>
                
                  return {Object} The named attribute.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function findAttr(content, name) {
  while (content) {
    // the order of lookups:
    // this.attrs[name]
    // this.constructor.attrs[name].value // default
    // this.parent.get(name);
    if (undefined !== content.attrs[name]) return content.attrs[name];

    // try getting default value
    var attr = content.constructor.attrs[name];
    if (attr &amp;&amp; attr.hasDefaultValue)
      return content.attrs[name] = attr.apply(content);
    // try getting value from parent
    // XXX: not sure if it should cache
    content = content.parent;
  }
}</pre>
              </section>
              
            
              
              
              
              
               
              
              <section class="method last-section" id="method.content.findAction">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  content.findAction(content, name)
                </h3>
                <h5>Description:</h5>
                <p>Traverse content tree to find action <code>fn</code>.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Content} The starting content.<br/>
                
                  param {String} The action's name.<br/>
                
                  return {Function} The named action.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function findAction(content, name) {
  while (content) {
    if (content.constructor.actions[name])
      return content.constructor.actions[name];
    content = content.parent;
  }

  throw new Error('content action [' + name + '] not found.');
}</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="element-module" class="module">
          <h2>element</h2>
        
          <div class="module-content">
          

          <h3>Properties:</h3>
          
            

            

            
              
                
            
              
                
            
              
              
                
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
                      

            
              
              
            
              
              
            
              
              
            
              

              
                
              
            
              <section class="property last-section" id="property.element.collection">              
                <h3>element.collection</h3>
                <p>Expose <code>collection</code>.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.collection = [];</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            

            

            
              
                
            
              
                
                      

            
              
              
            
              
              
            
          
            

            

            
              
                
            
              
                
                      

            
              
              
            
              
              
            
          
            

            

                      

            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.element.element">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  element.element(name)
                </h3>
                <h5>Description:</h5>
                <p>Get an <code>Element</code>.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} The element name.<br/>
                
                  return {Function} The Element class constructor.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function element(name) {
  if (exports.collection[name])
    return exports.collection[name];

  function Element(options) {
    this.name = name;
    this.content = this.constructor.content.init(options);
  }

  for (var key in statics) Element[key] = statics[key];

  // prototype

  Element.prototype = {};
  Element.prototype.constructor = Element;
  
  for (var key in proto) Element.prototype[key] = proto[key];

  Element.id = name;
  Element.content = content(name);
  Element.superclasses = [];
  Element.subclasses = [];
  exports.collection[name] = Element;
  exports.collection.push(Element);
  exports.emit('define', Element);
  exports.emit('define ' + name, Element);
  return Element;
}</pre>
              </section>
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.element.inherit">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  element.inherit(name)
                </h3>
                <h5>Description:</h5>
                <p>Add parent class props/fns.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {String} Property/function name.<br/>
                
                  return {Element} The element class constructor.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">statics.inherit = function(name){
  var parent = exports(name);

  if (this.superclasses.hasOwnProperty(name))
    return this;

  this.superclasses[name] = true;
  this.superclasses.push(name);

  if (!parent.subclasses.hasOwnProperty(this.id)) {
    parent.subclasses[this.id] = true;
    parent.subclasses.push(this.id);
  }

  for (var i = 0, n = parent.content.attrs.length; i &lt; n; i++) {
    // XXX: should just have to be like this:
    // this.attr(parent.attrs[i]);
    var attr = parent.content.attrs[i];
    this.attr(attr.name, attr.type, attr);
  }

  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.element.disinherit">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  element.disinherit(name)
                </h3>
                <h5>Description:</h5>
                <p>Remove parent class props/fns.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  param {String} Property/function name.<br/>
                
                  return {Element} The element class constructor.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">statics.disinherit = function(name){
  var parent = exports(name);

  if (this.superclasses.hasOwnProperty(name)) {
    delete this.superclasses[name];
    this.superclasses.splice(1, this.superclasses.indexOf((name));
  }

  if (parent.subclasses.hasOwnProperty(this.id)) {
    delete parent.subclasses[this.id];
    parent.subclasses.splice(1, parent.subclasses.indexOf((this.id));
  }

  return this;
};</pre>
              </section>
              
            
              
              
              
              
               
              
              <section class="method last-section" id="method.element.clear">
                
                
                

                
                                              
                
                              
                <h3>
                  element.clear()
                </h3>
                <h5>Description:</h5>
                <p>Clear everything (for testing).</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  return {this} self.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.clear = function(){
  exports.off();
  return this;
};</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
            
          
            
            
              
              
              
              
              <section class="method" id="method.element.render">
                
                
                

                
                                              
                
                              
                <h3>
                  element.render()
                </h3>
                <h5>Description:</h5>
                <p>Render template against content.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  return {Content} The current element's content.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.render = function(){
  this.remove();
  this.el = this.constructor.fn.clone(this.content);
  return this.el;
};</pre>
              </section>
              
            
              
              
              
              
               
              
              <section class="method last-section" id="method.element.remove">
                
                
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  element.remove()
                </h3>
                <h5>Description:</h5>
                <p>Remove the element.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  chainable {undefined} undefined<br/>
                
                  return {Element} The element instance.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.remove = function(){
  if (this.el &amp;&amp; this.el.parentNode) {
    this.el.parentNode.removeChild(this.el);
  }
  this.el = undefined;

  return this;
};</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="resource-module" class="module">
          <h2>resource</h2>
        
          <div class="module-content">
          

          <h3>Properties:</h3>
          
            

            

            
              
                
            
              
                
            
              
              
                
                
            
              
              
                
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
                      

            
              
              
            
              
              
            
              
              
            
              

              
            
              <section class="property" id="property.resource.collection">              
                <h3>resource.collection</h3>
                <p>Expose <code>collection</code></p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.collection = [];</pre>
              </section>
              
            
              
              
            
              

              
                
              
            
              <section class="property last-section" id="property.resource.validator">              
                <h3>resource.validator</h3>
                <p>Expose <code>validator</code>.</p>   
                
                 <p class="params-info">
                
                </p>            
                <pre class="js">exports.validator = validator;</pre>
              </section>
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            

            

            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
                      

            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            

            

                      

            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.resource.resource">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  resource.resource(name)
                </h3>
                <h5>Description:</h5>
                <p>Create a new resource constructor with the given <code>name</code>.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} Resource name.<br/>
                
                  return {Function} The `Resource` class constructor.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function resource(name) {
  if (exports.collection[name]) return exports.collection[name];
  if (exports.load(name)) return exports.collection[name];</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.resource.Resource">
                
                
                

                
                                              
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  resource.Resource(attrs, storedAttrs)
                </h3>
                <h5>Description:</h5>
                <p>Initialize a new resource with the given <code>attrs</code>.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  class {undefined} undefined<br/>
                
                  param {Object} An object with attributes.<br/>
                
                  param {Boolean} Attributes that should not be dirtied.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function Resource(attrs, storedAttrs) {
    // XXX: if storedAttrs, don't set to dirty
    this.attrs = {};
    this.dirty = {};
    this._callbacks = {};
    attrs = Resource._defaultAttrs(attrs, this);

    for (var key in attrs) {
      if (attrs.hasOwnProperty(key))
        this.set(key, attrs[key], true);
    }

    Resource.emit('init', this);
  }

  Resource.toString = function toString(){
    return 'resource(&quot;' + name + '&quot;)';
  }

  // statics

  Resource.className = name;
  Resource.id = name;
  Resource.attrs = [];
  // optimization
  Resource.attrs.__default__ = {};
  Resource.validators = [];
  Resource.prototypes = [];
  Resource.relations = [];
  Resource._callbacks = {};
  // starting off context
  Resource.context = Resource;

  for (var key in statics) Resource[key] = statics[key];

  // prototype

  Resource.prototype = {};
  Resource.prototype.constructor = Resource;
  
  for (var key in proto) Resource.prototype[key] = proto[key];

  Resource.action = stream.ns(name);
  Resource.id();

  exports.collection[name] = Resource;
  exports.collection.push(Resource);
  exports.emit('define', Resource);
  exports.emit('define ' + name, Resource);

  return Resource;
}</pre>
              </section>
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.resource.use">
                
                
                
                              
                <h3>
                  resource.use()
                </h3>
                <h5>Description:</h5>
                <p>Mixins.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.use = function(obj){
  if ('function' === typeof obj) {
    obj.call(exports, statics, proto, exports);
  } else {
    for (var key in obj) statics[key] = obj[key]
  }
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.resource.load">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                
                              
                <h3>
                  resource.load(name, path)
                </h3>
                <h5>Description:</h5>
                <p>Lazy-load stuff for a particular constructor.</p>

<p>Example:</p>

<p>resource.load('user', require.resolve('./lib/user'));</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} Resource name.<br/>
                
                  param {String} Resource path.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.load = function(name, path){
  return 1 === arguments.length
    ? load(exports, name)
    : load.apply(load, [exports].concat(Array.prototype.slice.call(arguments)));
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.resource.ns">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  resource.ns(ns)
                </h3>
                <h5>Description:</h5>
                <p>Create a <code>resource</code> function that<br />just prepends a namespace to every key.</p>

<p>This is used to make the DSL simpler,<br />check out the <code>tower-adapter</code> code for an example.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} The namespace.<br/>
                
                  return {Resource} The resource.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.ns = function(ns){
  function resource(name) {
    return exports(ns + '.' + name);
  }

  // XXX: copy functions?
  for (var key in exports) {
    if ('function' === typeof exports[key])
      resource[key] = exports[key];
  }
  return resource;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.resource.is">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  resource.is(obj)
                </h3>
                <h5>Description:</h5>
                <p>Check object is a <code>Resource</code> object.<br />XXX: maybe remove "resource('name')" as toString.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Object} A JavaScript object.<br/>
                
                  return {Boolean} true if obj is a `Resource` object, otherwise false.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.is = function(obj){
  return obj &amp;&amp; obj.constructor.toString().indexOf('resource(') === 0;
};</pre>
              </section>
              
            
              
              
              
              
               
              
              <section class="method last-section" id="method.resource.clear">
                
                
                

                
                                              
                
                              
                <h3>
                  resource.clear()
                </h3>
                <h5>Description:</h5>
                <p>Clear resources.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  return {this} self.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.clear = function(){
  exports.collection.forEach(function(emitter){
    emitter.off('define');
    delete exports.collection[emitter.className];
  });

  exports.collection.length = 0;

  return exports;
};</pre>
              </section>
              
            
          
            
            
              
              
            
              
              
              
              
              <section class="method" id="method.resource.isNew">
                
                
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  resource.isNew()
                </h3>
                <h5>Description:</h5>
                <p>Check if this resource is new.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  return {Boolean} true if resource is new, else false.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.isNew = function(){
  var key = this.constructor.primaryKey;
  return !this.has(key);
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.resource.save">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  resource.save(fn)
                </h3>
                <h5>Description:</h5>
                <p>Save and invoke <code>fn(err)</code>.</p>

<p>Events:</p>

<ul>
<li><code>save</code> on updates and saves</li>
<li><code>saving</code> pre-update or save, after validation</li>
</ul>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Function} Function invoked on resource creation.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.save = function(fn){
  var self = this;
  this.constructor.emit('saving', this);
  this.emit('saving');
  // XXX: needs to somehow set default properties
  // XXX: this itself should probably be
  //      bundled into a topology/stream/action.
  this.validate(function(err){
    if (err) {
      fn(err);
    } else {
      query()
        .select(self.constructor.className)
        .create(self, function(){
          self.dirty = {};
          self.constructor.emit('save', self);
          self.emit('save');
          if (fn) fn(null, self);
        });
    }
  });
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.resource.update">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  resource.update(fn)
                </h3>
                <h5>Description:</h5>
                <p>Update and invoke <code>fn(err)</code>.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Function} Function executed on resource update.<br/>
                
                  return {Mixed} fn return value.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.update = function(fn){
  return query()
    .select(this.constructor.className)
    .action('update', this).exec(fn);
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.resource.remove">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  resource.remove(fn)
                </h3>
                <h5>Description:</h5>
                <p>Remove the resource and mark it as <code>.removed</code><br />and invoke <code>fn(err)</code>.</p>

<p>Events:</p>

<ul>
<li><code>removing</code> before deletion</li>
<li><code>remove</code> on deletion</li>
</ul>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Function} Function executed on resource removal.<br/>
                
                  return {Mixed} fn return value.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.remove = function(fn){
  return query()
    .select(this.constructor.className)
    .where('id').eq(this.get('id'))
    .action('remove').exec(fn);
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.resource.isValid">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  resource.isValid(fn)
                </h3>
                <h5>Description:</h5>
                <p>Validate the resource and return a boolean.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Function} Validation function.<br/>
                
                  return {Boolean} true if there were errors, else false.<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.isValid = function(fn){
  this.validate(fn);
  return 0 === this.errors.length;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.resource.validate">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  resource.validate(fn)
                </h3>
                <h5>Description:</h5>
                <p>Perform validations.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Function} Validation function.<br/>
                
                  return {Boolean} true if there were errors, else false.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.validate = function(fn){
  var self = this;
  this.errors = [];
  this.emit('validating', this);
  // XXX: need single `validateAttributes`
  // XXX: need to store validators by key.
  each(this.constructor.validators, this, function(){
    // self.emit('after-validate', self);
    // self.emit('validated', self);
    self.emit('validate', self);

    if (fn) {
      if (self.errors.length)
        fn(new Error('Validation Error'));
      else
        fn(); 
    }
  });
  return 0 === this.errors.length;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.resource.set">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  resource.set(name, val, quiet)
                </h3>
                <h5>Description:</h5>
                <p>Set attribute value.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} Attribute name.<br/>
                
                  param {Mixed} Attribute value.<br/>
                
                  param {Boolean} If true, won't dispatch change events.<br/>
                
                  return {Object} self<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.set = function(name, val, quiet){
  var attr = this.constructor.attrs[name];
  if (!attr) return; // XXX: throw some error, or dynamic property flag?
  if (undefined === val &amp;&amp; attr.hasDefaultValue)
    val = attr.apply(this);
  val = attr.typecast(val);
  var prev = this.attrs[name];
  this.dirty[name] = val;
  this.attrs[name] = val;

  // XXX: this `quiet` functionality could probably be implemented
  //   in a less ad-hoc way. It is currently only used when setting
  //   properties passed in through `init`, such as from a db/adapter
  //   serializing data into a resource, doesn't need to dispatch changes.
  if (!quiet) {
    this.constructor.emit('change ' + name, this, val, prev);
    this.emit('change ' + name, val, prev); 
  }
  return this;
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.resource.get">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  resource.get(name)
                </h3>
                <h5>Description:</h5>
                <p>Get <code>name</code> value.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} Attribute name.<br/>
                
                  return {Mixed} Attribute value.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.get = function(name){
  // XXX: need a better way to do this
  if ('id' === name &amp;&amp; this.__id__) return this.__id__;
  if (undefined === this.attrs[name]) {
    var attr = this.defaultAttr(name)
    if (attr)
      return this.attrs[name] = attr.apply(this);
  } else {
    return this.attrs[name];
  }
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.resource.has">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  resource.has(attr)
                </h3>
                <h5>Description:</h5>
                <p>Check if <code>attr</code> is present (not <code>null</code> or <code>undefined</code>).</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} Attribute name.<br/>
                
                  return {Boolean} true if attribute exists, else false.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.has = function(attr){
  return null != this.attrs[attr];
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.resource.toJSON">
                
                
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  resource.toJSON()
                </h3>
                <h5>Description:</h5>
                <p>Return the JSON representation of the resource.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  return {Object} Resource attributes.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.toJSON = function(){
  return this.attrs;
};</pre>
              </section>
              
            
              
              
              
              
               
              
              <section class="method last-section" id="method.resource.defaultAttr">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                

                
                                              
                
                              
                <h3>
                  resource.defaultAttr(name)
                </h3>
                <h5>Description:</h5>
                <p>Returns <code>Attr</code> definition if it has a default value.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} Attribute name.<br/>
                
                  return {Boolean,Function} Attr definition if it exists, else.<br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.defaultAttr = function(name){
  var defaultAttrs = this.constructor.attrs.__default__;
  return defaultAttrs.hasOwnProperty(name) &amp;&amp; defaultAttrs[name];
};</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
        
        <div id="text-module" class="module">
          <h2>text</h2>
        
          <div class="module-content">
          

          <h3>Properties:</h3>
          
            

            

            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
            
              
                
                      

            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
              
              
            
          
            

            

                      

            
          

          <h3>Methods:</h3>
          
            
            
              
              
            
              
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.text.text">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  text.text(key)
                </h3>
                <h5>Description:</h5>
                <p>Example:</p>

<p>text('messages')</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} <br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function text(key, val) {
  return undefined === val
    ? (locale[key] || (locale[key] = new Text))
    : (locale[key] = new Text).one(val);
}

exports.has = function(key){
  return !!locale[key];
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.text.locale">
                
                
                
                              
                <h3>
                  text.locale()
                </h3>
                <h5>Description:</h5>
                <p>Set locale.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">exports.locale = function(val){
  locale = exports[val] || (exports[val] = {});
  return exports;
};</pre>
              </section>
              
            
              
              
            
              
              
              
              
              <section class="method" id="method.text.Text">
                
                
                

                
                                              
                
                              
                <h3>
                  text.Text()
                </h3>
                <h5>Description:</h5>
                <p>Instantiate a new <code>Text</code>.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">function Text() {
  this.inflections = [];
}</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.text.past">
                
                
                

                
                                              
                
                              
                <h3>
                  text.past()
                </h3>
                <h5>Description:</h5>
                <p>@param {String} string</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Text.prototype.past = function(string){
  return this.inflection(string, context.count, 'past');
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.text.present">
                
                
                

                
                                              
                
                              
                <h3>
                  text.present()
                </h3>
                <h5>Description:</h5>
                <p>@param {String} string</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Text.prototype.present = function(string){
  return this.inflection(string, context.count, 'present');
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.text.future">
                
                
                

                
                                              
                
                              
                <h3>
                  text.future()
                </h3>
                <h5>Description:</h5>
                <p>@param {String} string</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Text.prototype.future = function(string){
  return this.inflection(string, context.count, 'future');
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.text.tense">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  text.tense(tense, count)
                </h3>
                <h5>Description:</h5>
                <p>@param {String} string</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} <br/>
                
                  param {String} <br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Text.prototype.tense = function(string, tense, count){
  return this.inflection(string, count, tense);
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.text.none">
                
                
                

                
                                              
                
                              
                <h3>
                  text.none()
                </h3>
                <h5>Description:</h5>
                <p>@param {String} string</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Text.prototype.none = function(string){
  return this.inflection(string, 'none');
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.text.one">
                
                
                

                
                                              
                
                              
                <h3>
                  text.one()
                </h3>
                <h5>Description:</h5>
                <p>@param {String} string</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Text.prototype.one = function(string){
  return this.inflection(string, 'one');
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.text.other">
                
                
                

                
                                              
                
                              
                <h3>
                  text.other()
                </h3>
                <h5>Description:</h5>
                <p>@param {String} string</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Text.prototype.other = function(string){
  return this.inflection(string, 'other');
};</pre>
              </section>
              
            
              
              
              
              
              <section class="method" id="method.text.inflection">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  text.inflection(count, tense)
                </h3>
                <h5>Description:</h5>
                <p>@param {String} string</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {String} <br/>
                
                  param {String} <br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Text.prototype.inflection = function(string, count, tense){
  // this isn't quite correct...
  this.inflections.push(context = {
    string: string,
    count: count == null ? 'all' : count,
    tense: tense || 'present'
  });

  return this;
};</pre>
              </section>
              
            
              
              
              
              
               
              
              <section class="method last-section" id="method.text.render">
                
                
                

                
                  
                   
                 
               
                                              
                

                
                                              
                
                              
                <h3>
                  text.render(options)
                </h3>
                <h5>Description:</h5>
                <p>This could be a view on the client.</p>
                 
                 <p class="params-info">
                 <h5>Parameters:</h5>
                
                  param {Object} <br/>
                
                  api {undefined} undefined<br/>
                
                </p>
                <h5>Code:</h5>
                <pre class="js">Text.prototype.render = function(options){
  options || (options = {});

  var count = (options.count ? (1 === options.count ? 'one' : 'other') : 'none')
    , tense = options.tense || 'present'
    , key = tense + '.' + count
    , inflections = this.inflections
    , inflection = inflections[0]
    , currScore = 0
    , prevScore = 0;

  for (var i = 0, n = inflections.length; i &lt; n; i++) {
    currScore = 0
      + (count === inflections[i].count ? 1 : 0)
      + (tense === inflections[i].tense ? 1 : 0);

    if (currScore &gt; prevScore) {
      inflection = inflections[i];
      prevScore = currScore; 
    }
  }

  return inflection.string.replace(/\{\{(\w+)\}\}/g, function(_, $1){
    return options[$1];
  });
};</pre>
              </section>
              
            
          
            
            
          
          </div>
        </div>
        
      </div>
    </div>
  </div>
</div>
